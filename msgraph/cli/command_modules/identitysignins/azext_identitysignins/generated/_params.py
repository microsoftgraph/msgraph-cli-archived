# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_identitysignins.action import (
    AddNamedLocations,
    AddGrantControls,
    AddApplicationEnforcedRestrictions,
    AddCloudAppSecurity,
    AddPersistentBrowser,
    AddSignInFrequency,
    AddApplications,
    AddLocations,
    AddPlatforms,
    AddUsers,
    AddResults,
    AddApplication,
    AddActivityBasedTimeoutPolicies,
    AddClaimsMappingPolicies,
    AddHomeRealmDiscoveryPolicies,
    AddTokenIssuancePolicies,
    AddTokenLifetimePolicies,
    AddIdentitySecurityDefaultsEnforcementPolicy,
    AddAppliesTo,
    AddExcludes,
    AddIncludes
)


def load_arguments(self, _):

    with self.argument_context('identitysignins datapolicyoperationsdatapolicyoperation create-data-policy-operation') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('completed_date_time', help='Represents when the request for this data policy operation was '
                   'completed, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Null until the operation completes.')
        c.argument('progress', type=float, help='Specifies the progress of an operation.')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'running', 'complete', 'failed',
                                                     'unknownFutureValue']), help='')
        c.argument('storage_location', type=str, help='The URL location to where data is being exported for export '
                   'requests.')
        c.argument('submitted_date_time', help='Represents when the request for this data operation was submitted, in '
                   'UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('user_id', type=str, help='The id for the user on whom the operation is performed.')

    with self.argument_context('identitysignins datapolicyoperationsdatapolicyoperation delete-data-policy-operation') as c:
        c.argument('data_policy_operation_id', type=str, help='key: id of dataPolicyOperation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins datapolicyoperationsdatapolicyoperation list-data-policy-operation') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins datapolicyoperationsdatapolicyoperation show-data-policy-operation') as c:
        c.argument('data_policy_operation_id', type=str, help='key: id of dataPolicyOperation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins datapolicyoperationsdatapolicyoperation update-data-policy-operation') as c:
        c.argument('data_policy_operation_id', type=str, help='key: id of dataPolicyOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('completed_date_time', help='Represents when the request for this data policy operation was '
                   'completed, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Null until the operation completes.')
        c.argument('progress', type=float, help='Specifies the progress of an operation.')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'running', 'complete', 'failed',
                                                     'unknownFutureValue']), help='')
        c.argument('storage_location', type=str, help='The URL location to where data is being exported for export '
                   'requests.')
        c.argument('submitted_date_time', help='Represents when the request for this data operation was submitted, in '
                   'UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('user_id', type=str, help='The id for the user on whom the operation is performed.')

    with self.argument_context('identitysignins identity delete-conditional-access') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins identity show-conditional-access') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identity update-conditional-access') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('named_locations', action=AddNamedLocations, nargs='+', help='')
        c.argument('policies', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file.')

    with self.argument_context('identitysignins identityconditionalaccess create-named-location') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents creation date and time of the location '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='Human-readable name of the location.')
        c.argument('modified_date_time', help='The Timestamp type represents last modified date and time of the '
                   'location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 '
                   'would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')

    with self.argument_context('identitysignins identityconditionalaccess create-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='Specifies a display name for the conditionalAccessPolicy object.')
        c.argument('grant_controls', action=AddGrantControls, nargs='+', help='conditionalAccessGrantControls')
        c.argument('modified_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='')
        c.argument('application_enforced_restrictions', action=AddApplicationEnforcedRestrictions, nargs='+',
                   help='applicationEnforcedRestrictionsSessionControl', arg_group='Session Controls')
        c.argument('cloud_app_security', action=AddCloudAppSecurity, nargs='+', help='cloudAppSecuritySessionControl',
                   arg_group='Session Controls')
        c.argument('persistent_browser', action=AddPersistentBrowser, nargs='+',
                   help='persistentBrowserSessionControl', arg_group='Session Controls')
        c.argument('sign_in_frequency', action=AddSignInFrequency, nargs='+', help='signInFrequencySessionControl',
                   arg_group='Session Controls')
        c.argument('applications', action=AddApplications, nargs='+', help='conditionalAccessApplications',
                   arg_group='Conditions')
        c.argument('client_app_types', nargs='+', help='Client application types included in the policy. Possible '
                   'values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.',
                   arg_group='Conditions')
        c.argument('locations', action=AddLocations, nargs='+', help='conditionalAccessLocations',
                   arg_group='Conditions')
        c.argument('platforms', action=AddPlatforms, nargs='+', help='conditionalAccessPlatforms',
                   arg_group='Conditions')
        c.argument('sign_in_risk_levels', nargs='+', help='Risk levels included in the policy. Possible values are: '
                   'low, medium, high, none.', arg_group='Conditions')
        c.argument('users', action=AddUsers, nargs='+', help='conditionalAccessUsers', arg_group='Conditions')

    with self.argument_context('identitysignins identityconditionalaccess delete-named-location') as c:
        c.argument('named_location_id', type=str, help='key: id of namedLocation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins identityconditionalaccess delete-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins identityconditionalaccess list-named-location') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityconditionalaccess list-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityconditionalaccess show-named-location') as c:
        c.argument('named_location_id', type=str, help='key: id of namedLocation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityconditionalaccess show-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityconditionalaccess update-named-location') as c:
        c.argument('named_location_id', type=str, help='key: id of namedLocation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents creation date and time of the location '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('display_name', type=str, help='Human-readable name of the location.')
        c.argument('modified_date_time', help='The Timestamp type represents last modified date and time of the '
                   'location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 '
                   'would look like this: \'2014-01-01T00:00:00Z\'. Read-only.')

    with self.argument_context('identitysignins identityconditionalaccess update-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='Specifies a display name for the conditionalAccessPolicy object.')
        c.argument('grant_controls', action=AddGrantControls, nargs='+', help='conditionalAccessGrantControls')
        c.argument('modified_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='')
        c.argument('application_enforced_restrictions', action=AddApplicationEnforcedRestrictions, nargs='+',
                   help='applicationEnforcedRestrictionsSessionControl', arg_group='Session Controls')
        c.argument('cloud_app_security', action=AddCloudAppSecurity, nargs='+', help='cloudAppSecuritySessionControl',
                   arg_group='Session Controls')
        c.argument('persistent_browser', action=AddPersistentBrowser, nargs='+',
                   help='persistentBrowserSessionControl', arg_group='Session Controls')
        c.argument('sign_in_frequency', action=AddSignInFrequency, nargs='+', help='signInFrequencySessionControl',
                   arg_group='Session Controls')
        c.argument('applications', action=AddApplications, nargs='+', help='conditionalAccessApplications',
                   arg_group='Conditions')
        c.argument('client_app_types', nargs='+', help='Client application types included in the policy. Possible '
                   'values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.',
                   arg_group='Conditions')
        c.argument('locations', action=AddLocations, nargs='+', help='conditionalAccessLocations',
                   arg_group='Conditions')
        c.argument('platforms', action=AddPlatforms, nargs='+', help='conditionalAccessPlatforms',
                   arg_group='Conditions')
        c.argument('sign_in_risk_levels', nargs='+', help='Risk levels included in the policy. Possible values are: '
                   'low, medium, high, none.', arg_group='Conditions')
        c.argument('users', action=AddUsers, nargs='+', help='conditionalAccessUsers', arg_group='Conditions')

    with self.argument_context('identitysignins identityprovidersidentityprovider create-identity-provider') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_id', type=str, help='')
        c.argument('client_secret', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')

    with self.argument_context('identitysignins identityprovidersidentityprovider delete-identity-provider') as c:
        c.argument('identity_provider_id', type=str, help='key: id of identityProvider')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins identityprovidersidentityprovider list-identity-provider') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityprovidersidentityprovider show-identity-provider') as c:
        c.argument('identity_provider_id', type=str, help='key: id of identityProvider')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins identityprovidersidentityprovider update-identity-provider') as c:
        c.argument('identity_provider_id', type=str, help='key: id of identityProvider')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_id', type=str, help='')
        c.argument('client_secret', type=str, help='')
        c.argument('name', type=str, help='')
        c.argument('type_', options_list=['--type'], type=str, help='')

    with self.argument_context('identitysignins informationprotection show-information-protection') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins informationprotection update-information-protection') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('threat_assessment_requests', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('identitysignins informationprotection create-threat-assessment-request') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('category', arg_type=get_enum_type(['undefined', 'spam', 'phishing', 'malware',
                                                       'unknownFutureValue']), help='')
        c.argument('content_type_', options_list=['--content-type'], arg_type=get_enum_type(['mail', 'url', 'file']),
                   help='')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'.')
        c.argument('expected_assessment', arg_type=get_enum_type(['block', 'unblock']), help='')
        c.argument('request_source', arg_type=get_enum_type(['undefined', 'user', 'administrator']), help='')
        c.argument('status', arg_type=get_enum_type(['pending', 'completed']), help='')
        c.argument('results', action=AddResults, nargs='+', help='A collection of threat assessment results. '
                   'Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless '
                   'you apply $expand on it.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('identitysignins informationprotection delete-threat-assessment-request') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins informationprotection list-threat-assessment-request') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins informationprotection show-threat-assessment-request') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins informationprotection update-threat-assessment-request') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('category', arg_type=get_enum_type(['undefined', 'spam', 'phishing', 'malware',
                                                       'unknownFutureValue']), help='')
        c.argument('content_type_', options_list=['--content-type'], arg_type=get_enum_type(['mail', 'url', 'file']),
                   help='')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'.')
        c.argument('expected_assessment', arg_type=get_enum_type(['block', 'unblock']), help='')
        c.argument('request_source', arg_type=get_enum_type(['undefined', 'user', 'administrator']), help='')
        c.argument('status', arg_type=get_enum_type(['pending', 'completed']), help='')
        c.argument('results', action=AddResults, nargs='+', help='A collection of threat assessment results. '
                   'Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless '
                   'you apply $expand on it.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('identitysignins informationprotectionthreatassessmentrequest create-result') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'.')
        c.argument('message', type=str, help='The result message for each threat assessment.')
        c.argument('result_type', arg_type=get_enum_type(['checkPolicy', 'rescan', 'unknownFutureValue']), help='')

    with self.argument_context('identitysignins informationprotectionthreatassessmentrequest delete-result') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('threat_assessment_result_id', type=str, help='key: id of threatAssessmentResult')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins informationprotectionthreatassessmentrequest list-result') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins informationprotectionthreatassessmentrequest show-result') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('threat_assessment_result_id', type=str, help='key: id of threatAssessmentResult')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins informationprotectionthreatassessmentrequest update-result') as c:
        c.argument('threat_assessment_request_id', type=str, help='key: id of threatAssessmentRequest')
        c.argument('threat_assessment_result_id', type=str, help='key: id of threatAssessmentResult')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'.')
        c.argument('message', type=str, help='The result message for each threat assessment.')
        c.argument('result_type', arg_type=get_enum_type(['checkPolicy', 'rescan', 'unknownFutureValue']), help='')

    with self.argument_context('identitysignins invitationsinvitation create-invitation') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('invited_user_display_name', type=str, help='The display name of the user being invited.')
        c.argument('invited_user_email_address', type=str, help='The email address of the user being invited. '
                   'Required. The following special characters are not permitted in the email address:Tilde '
                   '(~)Exclamation point (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand '
                   '(&)Asterisk (*)Parentheses (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash '
                   '(/)Slash mark (/)Pipe (/|)Semicolon (;)Colon (:)Quotation marks (\')Angle brackets (< >)Question '
                   'mark (?)Comma (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted '
                   'anywhere in the user name, except at the beginning or end of the name.An underscore (_) is '
                   'permitted anywhere in the user name. This includes at the beginning or end of the name.')
        c.argument('invited_user_type', type=str, help='The userType of the user being invited. By default, this is '
                   'Guest. You can invite as Member if you are a company administrator.')
        c.argument('invite_redeem_url', type=str,
                   help='The URL the user can use to redeem their invitation. Read-only')
        c.argument('invite_redirect_url', type=str, help='The URL the user should be redirected to once the invitation '
                   'is redeemed. Required.')
        c.argument('send_invitation_message', arg_type=get_three_state_flag(), help='Indicates whether an email should '
                   'be sent to the user being invited or not. The default is false.')
        c.argument('status', type=str, help='The status of the invitation. Possible values: PendingAcceptance, '
                   'Completed, InProgress, and Error')
        c.argument('invited_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='Additional recipients the invitation message '
                   'should be sent to. Currently only 1 additional recipient is supported. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Invited User Message Info')
        c.argument('customized_message_body', type=str, help='Customized message body you want to send if you don\'t '
                   'want the default message.', arg_group='Invited User Message Info')
        c.argument('message_language', type=str, help='The language you want to send the default message in. If the '
                   'customizedMessageBody is specified, this property is ignored, and the message is sent using the '
                   'customizedMessageBody. The language format should be in ISO 639. The default is en-US.',
                   arg_group='Invited User Message Info')

    with self.argument_context('identitysignins invitationsinvitation delete-invitation') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins invitationsinvitation list-invitation') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins invitationsinvitation show-invitation') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins invitationsinvitation update-invitation') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('invited_user_display_name', type=str, help='The display name of the user being invited.')
        c.argument('invited_user_email_address', type=str, help='The email address of the user being invited. '
                   'Required. The following special characters are not permitted in the email address:Tilde '
                   '(~)Exclamation point (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand '
                   '(&)Asterisk (*)Parentheses (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash '
                   '(/)Slash mark (/)Pipe (/|)Semicolon (;)Colon (:)Quotation marks (\')Angle brackets (< >)Question '
                   'mark (?)Comma (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted '
                   'anywhere in the user name, except at the beginning or end of the name.An underscore (_) is '
                   'permitted anywhere in the user name. This includes at the beginning or end of the name.')
        c.argument('invited_user_type', type=str, help='The userType of the user being invited. By default, this is '
                   'Guest. You can invite as Member if you are a company administrator.')
        c.argument('invite_redeem_url', type=str,
                   help='The URL the user can use to redeem their invitation. Read-only')
        c.argument('invite_redirect_url', type=str, help='The URL the user should be redirected to once the invitation '
                   'is redeemed. Required.')
        c.argument('send_invitation_message', arg_type=get_three_state_flag(), help='Indicates whether an email should '
                   'be sent to the user being invited or not. The default is false.')
        c.argument('status', type=str, help='The status of the invitation. Possible values: PendingAcceptance, '
                   'Completed, InProgress, and Error')
        c.argument('invited_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='Additional recipients the invitation message '
                   'should be sent to. Currently only 1 additional recipient is supported. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Invited User Message Info')
        c.argument('customized_message_body', type=str, help='Customized message body you want to send if you don\'t '
                   'want the default message.', arg_group='Invited User Message Info')
        c.argument('message_language', type=str, help='The language you want to send the default message in. If the '
                   'customizedMessageBody is specified, this property is ignored, and the message is sent using the '
                   'customizedMessageBody. The language format should be in ISO 639. The default is en-US.',
                   arg_group='Invited User Message Info')

    with self.argument_context('identitysignins invitation delete-ref-invited-user') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins invitation set-ref-invited-user') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('identitysignins invitation show-invited-user') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins invitation show-ref-invited-user') as c:
        c.argument('invitation_id', type=str, help='key: id of invitation')

    with self.argument_context('identitysignins oauth2permissiongrantsoauth2permissiongrant create-o-auth2-permission-grant') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_id', type=str, help='The id of the client service principal for the application which is '
                   'authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter '
                   '(eq only).')
        c.argument('consent_type', type=str, help='Indicates if authorization is granted for the client application to '
                   'impersonate all users or only a specific user. AllPrincipals indicates authorization to '
                   'impersonate all users. Principal indicates authorization to impersonate a specific user. Consent '
                   'on behalf of all users can be granted by an administrator. Non-admin users may be authorized to '
                   'consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports '
                   '$filter (eq only).')
        c.argument('principal_id', type=str, help='The id of the user on behalf of whom the client is authorized to '
                   'access the resource, when consentType is Principal. If consentType is AllPrincipals this value is '
                   'null. Required when consentType is Principal.')
        c.argument('resource_id', type=str, help='The id of the resource service principal to which access is '
                   'authorized. This identifies the API which the client is authorized to attempt to call on behalf of '
                   'a signed-in user.')
        c.argument('scope', type=str, help='A space-separated list of the claim values for delegated permissions which '
                   'should be included in access tokens for the resource application (the API). For example, openid '
                   'User.Read GroupMember.Read.All. Each claim value should match the value field of one of the '
                   'delegated permissions defined by the API, listed in the publishedPermissionScopes property of the '
                   'resource service principal.')

    with self.argument_context('identitysignins oauth2permissiongrantsoauth2permissiongrant delete-o-auth2-permission-grant') as c:
        c.argument('o_auth2_permission_grant_id', type=str, help='key: id of oAuth2PermissionGrant')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins oauth2permissiongrantsoauth2permissiongrant list-o-auth2-permission-grant') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins oauth2permissiongrantsoauth2permissiongrant show-o-auth2-permission-grant') as c:
        c.argument('o_auth2_permission_grant_id', type=str, help='key: id of oAuth2PermissionGrant')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins oauth2permissiongrantsoauth2permissiongrant update-o-auth2-permission-grant') as c:
        c.argument('o_auth2_permission_grant_id', type=str, help='key: id of oAuth2PermissionGrant')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_id', type=str, help='The id of the client service principal for the application which is '
                   'authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter '
                   '(eq only).')
        c.argument('consent_type', type=str, help='Indicates if authorization is granted for the client application to '
                   'impersonate all users or only a specific user. AllPrincipals indicates authorization to '
                   'impersonate all users. Principal indicates authorization to impersonate a specific user. Consent '
                   'on behalf of all users can be granted by an administrator. Non-admin users may be authorized to '
                   'consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports '
                   '$filter (eq only).')
        c.argument('principal_id', type=str, help='The id of the user on behalf of whom the client is authorized to '
                   'access the resource, when consentType is Principal. If consentType is AllPrincipals this value is '
                   'null. Required when consentType is Principal.')
        c.argument('resource_id', type=str, help='The id of the resource service principal to which access is '
                   'authorized. This identifies the API which the client is authorized to attempt to call on behalf of '
                   'a signed-in user.')
        c.argument('scope', type=str, help='A space-separated list of the claim values for delegated permissions which '
                   'should be included in access tokens for the resource application (the API). For example, openid '
                   'User.Read GroupMember.Read.All. Each claim value should match the value field of one of the '
                   'delegated permissions defined by the API, listed in the publishedPermissionScopes property of the '
                   'resource service principal.')

    with self.argument_context('identitysignins organization create-ref-certificate-based-auth-configuration') as c:
        c.argument('organization_id', type=str, help='key: id of organization')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('identitysignins organization list-certificate-based-auth-configuration') as c:
        c.argument('organization_id', type=str, help='key: id of organization')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins organization list-ref-certificate-based-auth-configuration') as c:
        c.argument('organization_id', type=str, help='key: id of organization')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('identitysignins policiespolicyroot show-policy-root') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policiespolicyroot update-policy-root') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('activity_based_timeout_policies', action=AddActivityBasedTimeoutPolicies, nargs='+', help='')
        c.argument('claims_mapping_policies', action=AddClaimsMappingPolicies, nargs='+', help='')
        c.argument('home_realm_discovery_policies', action=AddHomeRealmDiscoveryPolicies, nargs='+', help='')
        c.argument('permission_grant_policies', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('token_issuance_policies', action=AddTokenIssuancePolicies, nargs='+', help='')
        c.argument('token_lifetime_policies', action=AddTokenLifetimePolicies, nargs='+', help='')
        c.argument('conditional_access_policies', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('identity_security_defaults_enforcement_policy',
                   action=AddIdentitySecurityDefaultsEnforcementPolicy, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')

    with self.argument_context('identitysignins policy create-activity-based-timeout-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy create-claim-mapping-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy create-conditional-access-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='Specifies a display name for the conditionalAccessPolicy object.')
        c.argument('grant_controls', action=AddGrantControls, nargs='+', help='conditionalAccessGrantControls')
        c.argument('modified_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='')
        c.argument('application_enforced_restrictions', action=AddApplicationEnforcedRestrictions, nargs='+',
                   help='applicationEnforcedRestrictionsSessionControl', arg_group='Session Controls')
        c.argument('cloud_app_security', action=AddCloudAppSecurity, nargs='+', help='cloudAppSecuritySessionControl',
                   arg_group='Session Controls')
        c.argument('persistent_browser', action=AddPersistentBrowser, nargs='+',
                   help='persistentBrowserSessionControl', arg_group='Session Controls')
        c.argument('sign_in_frequency', action=AddSignInFrequency, nargs='+', help='signInFrequencySessionControl',
                   arg_group='Session Controls')
        c.argument('applications', action=AddApplications, nargs='+', help='conditionalAccessApplications',
                   arg_group='Conditions')
        c.argument('client_app_types', nargs='+', help='Client application types included in the policy. Possible '
                   'values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.',
                   arg_group='Conditions')
        c.argument('locations', action=AddLocations, nargs='+', help='conditionalAccessLocations',
                   arg_group='Conditions')
        c.argument('platforms', action=AddPlatforms, nargs='+', help='conditionalAccessPlatforms',
                   arg_group='Conditions')
        c.argument('sign_in_risk_levels', nargs='+', help='Risk levels included in the policy. Possible values are: '
                   'low, medium, high, none.', arg_group='Conditions')
        c.argument('users', action=AddUsers, nargs='+', help='conditionalAccessUsers', arg_group='Conditions')

    with self.argument_context('identitysignins policy create-home-realm-discovery-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy create-permission-grant-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('excludes', action=AddExcludes, nargs='+', help='')
        c.argument('includes', action=AddIncludes, nargs='+', help='')

    with self.argument_context('identitysignins policy create-token-issuance-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy create-token-lifetime-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy delete-activity-based-timeout-policy') as c:
        c.argument('activity_based_timeout_policy_id', type=str, help='key: id of activityBasedTimeoutPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-claim-mapping-policy') as c:
        c.argument('claims_mapping_policy_id', type=str, help='key: id of claimsMappingPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-conditional-access-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-home-realm-discovery-policy') as c:
        c.argument('home_realm_discovery_policy_id', type=str, help='key: id of homeRealmDiscoveryPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-identity-security-default-enforcement-policy') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-permission-grant-policy') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-token-issuance-policy') as c:
        c.argument('token_issuance_policy_id', type=str, help='key: id of tokenIssuancePolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy delete-token-lifetime-policy') as c:
        c.argument('token_lifetime_policy_id', type=str, help='key: id of tokenLifetimePolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policy list-activity-based-timeout-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-claim-mapping-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-conditional-access-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-home-realm-discovery-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-permission-grant-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-token-issuance-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy list-token-lifetime-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-activity-based-timeout-policy') as c:
        c.argument('activity_based_timeout_policy_id', type=str, help='key: id of activityBasedTimeoutPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-claim-mapping-policy') as c:
        c.argument('claims_mapping_policy_id', type=str, help='key: id of claimsMappingPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-conditional-access-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-home-realm-discovery-policy') as c:
        c.argument('home_realm_discovery_policy_id', type=str, help='key: id of homeRealmDiscoveryPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-identity-security-default-enforcement-policy') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-permission-grant-policy') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-token-issuance-policy') as c:
        c.argument('token_issuance_policy_id', type=str, help='key: id of tokenIssuancePolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy show-token-lifetime-policy') as c:
        c.argument('token_lifetime_policy_id', type=str, help='key: id of tokenLifetimePolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policy update-activity-based-timeout-policy') as c:
        c.argument('activity_based_timeout_policy_id', type=str, help='key: id of activityBasedTimeoutPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy update-claim-mapping-policy') as c:
        c.argument('claims_mapping_policy_id', type=str, help='key: id of claimsMappingPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy update-conditional-access-policy') as c:
        c.argument('conditional_access_policy_id', type=str, help='key: id of conditionalAccessPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('description', type=str, help='')
        c.argument('display_name', type=str, help='Specifies a display name for the conditionalAccessPolicy object.')
        c.argument('grant_controls', action=AddGrantControls, nargs='+', help='conditionalAccessGrantControls')
        c.argument('modified_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Readonly.')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='')
        c.argument('application_enforced_restrictions', action=AddApplicationEnforcedRestrictions, nargs='+',
                   help='applicationEnforcedRestrictionsSessionControl', arg_group='Session Controls')
        c.argument('cloud_app_security', action=AddCloudAppSecurity, nargs='+', help='cloudAppSecuritySessionControl',
                   arg_group='Session Controls')
        c.argument('persistent_browser', action=AddPersistentBrowser, nargs='+',
                   help='persistentBrowserSessionControl', arg_group='Session Controls')
        c.argument('sign_in_frequency', action=AddSignInFrequency, nargs='+', help='signInFrequencySessionControl',
                   arg_group='Session Controls')
        c.argument('applications', action=AddApplications, nargs='+', help='conditionalAccessApplications',
                   arg_group='Conditions')
        c.argument('client_app_types', nargs='+', help='Client application types included in the policy. Possible '
                   'values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.',
                   arg_group='Conditions')
        c.argument('locations', action=AddLocations, nargs='+', help='conditionalAccessLocations',
                   arg_group='Conditions')
        c.argument('platforms', action=AddPlatforms, nargs='+', help='conditionalAccessPlatforms',
                   arg_group='Conditions')
        c.argument('sign_in_risk_levels', nargs='+', help='Risk levels included in the policy. Possible values are: '
                   'low, medium, high, none.', arg_group='Conditions')
        c.argument('users', action=AddUsers, nargs='+', help='conditionalAccessUsers', arg_group='Conditions')

    with self.argument_context('identitysignins policy update-home-realm-discovery-policy') as c:
        c.argument('home_realm_discovery_policy_id', type=str, help='key: id of homeRealmDiscoveryPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy update-identity-security-default-enforcement-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='If set to true, Azure Active Directory '
                   'security defaults is enabled for the tenant.')

    with self.argument_context('identitysignins policy update-permission-grant-policy') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('excludes', action=AddExcludes, nargs='+', help='')
        c.argument('includes', action=AddIncludes, nargs='+', help='')

    with self.argument_context('identitysignins policy update-token-issuance-policy') as c:
        c.argument('token_issuance_policy_id', type=str, help='key: id of tokenIssuancePolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policy update-token-lifetime-policy') as c:
        c.argument('token_lifetime_policy_id', type=str, help='key: id of tokenLifetimePolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', type=str, help='Description for this policy.')
        c.argument('display_name', type=str, help='Display name for this policy.')
        c.argument('definition', nargs='+', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='+', help='')

    with self.argument_context('identitysignins policiespermissiongrantpolicy create-exclude') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_application_ids', nargs='+', help='')
        c.argument('client_application_publisher_ids', nargs='+', help='')
        c.argument('client_applications_from_verified_publisher_only', arg_type=get_three_state_flag(), help='')
        c.argument('client_application_tenant_ids', nargs='+', help='')
        c.argument('permission_classification', type=str, help='')
        c.argument('permissions', nargs='+', help='')
        c.argument('permission_type', arg_type=get_enum_type(['application', 'delegated', 'delegatedUserConsentable']),
                   help='')
        c.argument('resource_application', type=str, help='')

    with self.argument_context('identitysignins policiespermissiongrantpolicy create-include') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_application_ids', nargs='+', help='')
        c.argument('client_application_publisher_ids', nargs='+', help='')
        c.argument('client_applications_from_verified_publisher_only', arg_type=get_three_state_flag(), help='')
        c.argument('client_application_tenant_ids', nargs='+', help='')
        c.argument('permission_classification', type=str, help='')
        c.argument('permissions', nargs='+', help='')
        c.argument('permission_type', arg_type=get_enum_type(['application', 'delegated', 'delegatedUserConsentable']),
                   help='')
        c.argument('resource_application', type=str, help='')

    with self.argument_context('identitysignins policiespermissiongrantpolicy delete-exclude') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policiespermissiongrantpolicy delete-include') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('identitysignins policiespermissiongrantpolicy list-exclude') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policiespermissiongrantpolicy list-include') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policiespermissiongrantpolicy show-exclude') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policiespermissiongrantpolicy show-include') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('identitysignins policiespermissiongrantpolicy update-exclude') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_application_ids', nargs='+', help='')
        c.argument('client_application_publisher_ids', nargs='+', help='')
        c.argument('client_applications_from_verified_publisher_only', arg_type=get_three_state_flag(), help='')
        c.argument('client_application_tenant_ids', nargs='+', help='')
        c.argument('permission_classification', type=str, help='')
        c.argument('permissions', nargs='+', help='')
        c.argument('permission_type', arg_type=get_enum_type(['application', 'delegated', 'delegatedUserConsentable']),
                   help='')
        c.argument('resource_application', type=str, help='')

    with self.argument_context('identitysignins policiespermissiongrantpolicy update-include') as c:
        c.argument('permission_grant_policy_id', type=str, help='key: id of permissionGrantPolicy')
        c.argument('permission_grant_condition_set_id', type=str, help='key: id of permissionGrantConditionSet')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('client_application_ids', nargs='+', help='')
        c.argument('client_application_publisher_ids', nargs='+', help='')
        c.argument('client_applications_from_verified_publisher_only', arg_type=get_three_state_flag(), help='')
        c.argument('client_application_tenant_ids', nargs='+', help='')
        c.argument('permission_classification', type=str, help='')
        c.argument('permissions', nargs='+', help='')
        c.argument('permission_type', arg_type=get_enum_type(['application', 'delegated', 'delegatedUserConsentable']),
                   help='')
        c.argument('resource_application', type=str, help='')
