# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def identitysignins_datapolicyoperationsdatapolicyoperation_create_data_policy_operation(client,
                                                                                         id_=None,
                                                                                         completed_date_time=None,
                                                                                         progress=None,
                                                                                         status=None,
                                                                                         storage_location=None,
                                                                                         submitted_date_time=None,
                                                                                         user_id=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if completed_date_time is not None:
        body['completed_date_time'] = completed_date_time
    if progress is not None:
        body['progress'] = progress
    if status is not None:
        body['status'] = status
    if storage_location is not None:
        body['storage_location'] = storage_location
    if submitted_date_time is not None:
        body['submitted_date_time'] = submitted_date_time
    if user_id is not None:
        body['user_id'] = user_id
    return client.create_data_policy_operation(body=body)


def identitysignins_datapolicyoperationsdatapolicyoperation_delete_data_policy_operation(client,
                                                                                         data_policy_operation_id,
                                                                                         if_match=None):
    return client.delete_data_policy_operation(data_policy_operation_id=data_policy_operation_id,
                                               if_match=if_match)


def identitysignins_datapolicyoperationsdatapolicyoperation_list_data_policy_operation(client,
                                                                                       orderby=None,
                                                                                       select=None,
                                                                                       expand=None):
    return client.list_data_policy_operation(orderby=orderby,
                                             select=select,
                                             expand=expand)


def identitysignins_datapolicyoperationsdatapolicyoperation_show_data_policy_operation(client,
                                                                                       data_policy_operation_id,
                                                                                       select=None,
                                                                                       expand=None):
    return client.get_data_policy_operation(data_policy_operation_id=data_policy_operation_id,
                                            select=select,
                                            expand=expand)


def identitysignins_datapolicyoperationsdatapolicyoperation_update_data_policy_operation(client,
                                                                                         data_policy_operation_id,
                                                                                         id_=None,
                                                                                         completed_date_time=None,
                                                                                         progress=None,
                                                                                         status=None,
                                                                                         storage_location=None,
                                                                                         submitted_date_time=None,
                                                                                         user_id=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if completed_date_time is not None:
        body['completed_date_time'] = completed_date_time
    if progress is not None:
        body['progress'] = progress
    if status is not None:
        body['status'] = status
    if storage_location is not None:
        body['storage_location'] = storage_location
    if submitted_date_time is not None:
        body['submitted_date_time'] = submitted_date_time
    if user_id is not None:
        body['user_id'] = user_id
    return client.update_data_policy_operation(data_policy_operation_id=data_policy_operation_id,
                                               body=body)


def identitysignins_identity_delete_conditional_access(client,
                                                       if_match=None):
    return client.delete_conditional_access(if_match=if_match)


def identitysignins_identity_show_conditional_access(client,
                                                     select=None,
                                                     expand=None):
    return client.get_conditional_access(select=select,
                                         expand=expand)


def identitysignins_identity_update_conditional_access(client,
                                                       id_=None,
                                                       named_locations=None,
                                                       policies=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if named_locations is not None:
        body['named_locations'] = named_locations
    if policies is not None:
        body['policies'] = policies
    return client.update_conditional_access(body=body)


def identitysignins_identityconditionalaccess_create_named_location(client,
                                                                    id_=None,
                                                                    created_date_time=None,
                                                                    display_name=None,
                                                                    modified_date_time=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if display_name is not None:
        body['display_name'] = display_name
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    return client.create_named_locations(body=body)


def identitysignins_identityconditionalaccess_create_policy(client,
                                                            id_=None,
                                                            created_date_time=None,
                                                            description=None,
                                                            display_name=None,
                                                            grant_controls=None,
                                                            modified_date_time=None,
                                                            state=None,
                                                            application_enforced_restrictions=None,
                                                            cloud_app_security=None,
                                                            persistent_browser=None,
                                                            sign_in_frequency=None,
                                                            applications=None,
                                                            client_app_types=None,
                                                            locations=None,
                                                            platforms=None,
                                                            sign_in_risk_levels=None,
                                                            users=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if grant_controls is not None:
        body['grant_controls'] = grant_controls
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    if state is not None:
        body['state'] = state
    body['session_controls'] = {}
    if application_enforced_restrictions is not None:
        body['session_controls']['application_enforced_restrictions'] = application_enforced_restrictions
    if cloud_app_security is not None:
        body['session_controls']['cloud_app_security'] = cloud_app_security
    if persistent_browser is not None:
        body['session_controls']['persistent_browser'] = persistent_browser
    if sign_in_frequency is not None:
        body['session_controls']['sign_in_frequency'] = sign_in_frequency
    if len(body['session_controls']) == 0:
        del body['session_controls']
    body['conditions'] = {}
    if applications is not None:
        body['conditions']['applications'] = applications
    if client_app_types is not None:
        body['conditions']['client_app_types'] = client_app_types
    if locations is not None:
        body['conditions']['locations'] = locations
    if platforms is not None:
        body['conditions']['platforms'] = platforms
    if sign_in_risk_levels is not None:
        body['conditions']['sign_in_risk_levels'] = sign_in_risk_levels
    if users is not None:
        body['conditions']['users'] = users
    if len(body['conditions']) == 0:
        del body['conditions']
    return client.create_policies(body=body)


def identitysignins_identityconditionalaccess_delete_named_location(client,
                                                                    named_location_id,
                                                                    if_match=None):
    return client.delete_named_locations(named_location_id=named_location_id,
                                         if_match=if_match)


def identitysignins_identityconditionalaccess_delete_policy(client,
                                                            conditional_access_policy_id,
                                                            if_match=None):
    return client.delete_policies(conditional_access_policy_id=conditional_access_policy_id,
                                  if_match=if_match)


def identitysignins_identityconditionalaccess_list_named_location(client,
                                                                  orderby=None,
                                                                  select=None,
                                                                  expand=None):
    return client.list_named_locations(orderby=orderby,
                                       select=select,
                                       expand=expand)


def identitysignins_identityconditionalaccess_list_policy(client,
                                                          orderby=None,
                                                          select=None,
                                                          expand=None):
    return client.list_policies(orderby=orderby,
                                select=select,
                                expand=expand)


def identitysignins_identityconditionalaccess_show_named_location(client,
                                                                  named_location_id,
                                                                  select=None,
                                                                  expand=None):
    return client.get_named_locations(named_location_id=named_location_id,
                                      select=select,
                                      expand=expand)


def identitysignins_identityconditionalaccess_show_policy(client,
                                                          conditional_access_policy_id,
                                                          select=None,
                                                          expand=None):
    return client.get_policies(conditional_access_policy_id=conditional_access_policy_id,
                               select=select,
                               expand=expand)


def identitysignins_identityconditionalaccess_update_named_location(client,
                                                                    named_location_id,
                                                                    id_=None,
                                                                    created_date_time=None,
                                                                    display_name=None,
                                                                    modified_date_time=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if display_name is not None:
        body['display_name'] = display_name
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    return client.update_named_locations(named_location_id=named_location_id,
                                         body=body)


def identitysignins_identityconditionalaccess_update_policy(client,
                                                            conditional_access_policy_id,
                                                            id_=None,
                                                            created_date_time=None,
                                                            description=None,
                                                            display_name=None,
                                                            grant_controls=None,
                                                            modified_date_time=None,
                                                            state=None,
                                                            application_enforced_restrictions=None,
                                                            cloud_app_security=None,
                                                            persistent_browser=None,
                                                            sign_in_frequency=None,
                                                            applications=None,
                                                            client_app_types=None,
                                                            locations=None,
                                                            platforms=None,
                                                            sign_in_risk_levels=None,
                                                            users=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if grant_controls is not None:
        body['grant_controls'] = grant_controls
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    if state is not None:
        body['state'] = state
    body['session_controls'] = {}
    if application_enforced_restrictions is not None:
        body['session_controls']['application_enforced_restrictions'] = application_enforced_restrictions
    if cloud_app_security is not None:
        body['session_controls']['cloud_app_security'] = cloud_app_security
    if persistent_browser is not None:
        body['session_controls']['persistent_browser'] = persistent_browser
    if sign_in_frequency is not None:
        body['session_controls']['sign_in_frequency'] = sign_in_frequency
    if len(body['session_controls']) == 0:
        del body['session_controls']
    body['conditions'] = {}
    if applications is not None:
        body['conditions']['applications'] = applications
    if client_app_types is not None:
        body['conditions']['client_app_types'] = client_app_types
    if locations is not None:
        body['conditions']['locations'] = locations
    if platforms is not None:
        body['conditions']['platforms'] = platforms
    if sign_in_risk_levels is not None:
        body['conditions']['sign_in_risk_levels'] = sign_in_risk_levels
    if users is not None:
        body['conditions']['users'] = users
    if len(body['conditions']) == 0:
        del body['conditions']
    return client.update_policies(conditional_access_policy_id=conditional_access_policy_id,
                                  body=body)


def identitysignins_identityprovidersidentityprovider_create_identity_provider(client,
                                                                               id_=None,
                                                                               client_id=None,
                                                                               client_secret=None,
                                                                               name=None,
                                                                               type_=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_id is not None:
        body['client_id'] = client_id
    if client_secret is not None:
        body['client_secret'] = client_secret
    if name is not None:
        body['name'] = name
    if type_ is not None:
        body['type'] = type_
    return client.create_identity_provider(body=body)


def identitysignins_identityprovidersidentityprovider_delete_identity_provider(client,
                                                                               identity_provider_id,
                                                                               if_match=None):
    return client.delete_identity_provider(identity_provider_id=identity_provider_id,
                                           if_match=if_match)


def identitysignins_identityprovidersidentityprovider_list_identity_provider(client,
                                                                             orderby=None,
                                                                             select=None,
                                                                             expand=None):
    return client.list_identity_provider(orderby=orderby,
                                         select=select,
                                         expand=expand)


def identitysignins_identityprovidersidentityprovider_show_identity_provider(client,
                                                                             identity_provider_id,
                                                                             select=None,
                                                                             expand=None):
    return client.get_identity_provider(identity_provider_id=identity_provider_id,
                                        select=select,
                                        expand=expand)


def identitysignins_identityprovidersidentityprovider_update_identity_provider(client,
                                                                               identity_provider_id,
                                                                               id_=None,
                                                                               client_id=None,
                                                                               client_secret=None,
                                                                               name=None,
                                                                               type_=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_id is not None:
        body['client_id'] = client_id
    if client_secret is not None:
        body['client_secret'] = client_secret
    if name is not None:
        body['name'] = name
    if type_ is not None:
        body['type'] = type_
    return client.update_identity_provider(identity_provider_id=identity_provider_id,
                                           body=body)


def identitysignins_informationprotection_show_information_protection(client,
                                                                      select=None,
                                                                      expand=None):
    return client.get_information_protection(select=select,
                                             expand=expand)


def identitysignins_informationprotection_update_information_protection(client,
                                                                        id_=None,
                                                                        threat_assessment_requests=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if threat_assessment_requests is not None:
        body['threat_assessment_requests'] = threat_assessment_requests
    return client.update_information_protection(body=body)


def identitysignins_informationprotection_create_threat_assessment_request(client,
                                                                           id_=None,
                                                                           category=None,
                                                                           content_type_=None,
                                                                           created_date_time=None,
                                                                           expected_assessment=None,
                                                                           request_source=None,
                                                                           status=None,
                                                                           results=None,
                                                                           application=None,
                                                                           device=None,
                                                                           user=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if category is not None:
        body['category'] = category
    if content_type_ is not None:
        body['content_type'] = content_type_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if expected_assessment is not None:
        body['expected_assessment'] = expected_assessment
    if request_source is not None:
        body['request_source'] = request_source
    if status is not None:
        body['status'] = status
    if results is not None:
        body['results'] = results
    body['created_by'] = {}
    if application is not None:
        body['created_by']['application'] = application
    if device is not None:
        body['created_by']['device'] = device
    if user is not None:
        body['created_by']['user'] = user
    if len(body['created_by']) == 0:
        del body['created_by']
    return client.create_threat_assessment_requests(body=body)


def identitysignins_informationprotection_delete_threat_assessment_request(client,
                                                                           threat_assessment_request_id,
                                                                           if_match=None):
    return client.delete_threat_assessment_requests(threat_assessment_request_id=threat_assessment_request_id,
                                                    if_match=if_match)


def identitysignins_informationprotection_list_threat_assessment_request(client,
                                                                         orderby=None,
                                                                         select=None,
                                                                         expand=None):
    return client.list_threat_assessment_requests(orderby=orderby,
                                                  select=select,
                                                  expand=expand)


def identitysignins_informationprotection_show_threat_assessment_request(client,
                                                                         threat_assessment_request_id,
                                                                         select=None,
                                                                         expand=None):
    return client.get_threat_assessment_requests(threat_assessment_request_id=threat_assessment_request_id,
                                                 select=select,
                                                 expand=expand)


def identitysignins_informationprotection_update_threat_assessment_request(client,
                                                                           threat_assessment_request_id,
                                                                           id_=None,
                                                                           category=None,
                                                                           content_type_=None,
                                                                           created_date_time=None,
                                                                           expected_assessment=None,
                                                                           request_source=None,
                                                                           status=None,
                                                                           results=None,
                                                                           application=None,
                                                                           device=None,
                                                                           user=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if category is not None:
        body['category'] = category
    if content_type_ is not None:
        body['content_type'] = content_type_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if expected_assessment is not None:
        body['expected_assessment'] = expected_assessment
    if request_source is not None:
        body['request_source'] = request_source
    if status is not None:
        body['status'] = status
    if results is not None:
        body['results'] = results
    body['created_by'] = {}
    if application is not None:
        body['created_by']['application'] = application
    if device is not None:
        body['created_by']['device'] = device
    if user is not None:
        body['created_by']['user'] = user
    if len(body['created_by']) == 0:
        del body['created_by']
    return client.update_threat_assessment_requests(threat_assessment_request_id=threat_assessment_request_id,
                                                    body=body)


def identitysignins_informationprotectionthreatassessmentrequest_create_result(client,
                                                                               threat_assessment_request_id,
                                                                               id_=None,
                                                                               created_date_time=None,
                                                                               message=None,
                                                                               result_type=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if message is not None:
        body['message'] = message
    if result_type is not None:
        body['result_type'] = result_type
    return client.create_results(threat_assessment_request_id=threat_assessment_request_id,
                                 body=body)


def identitysignins_informationprotectionthreatassessmentrequest_delete_result(client,
                                                                               threat_assessment_request_id,
                                                                               threat_assessment_result_id,
                                                                               if_match=None):
    return client.delete_results(threat_assessment_request_id=threat_assessment_request_id,
                                 threat_assessment_result_id=threat_assessment_result_id,
                                 if_match=if_match)


def identitysignins_informationprotectionthreatassessmentrequest_list_result(client,
                                                                             threat_assessment_request_id,
                                                                             orderby=None,
                                                                             select=None,
                                                                             expand=None):
    return client.list_results(threat_assessment_request_id=threat_assessment_request_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def identitysignins_informationprotectionthreatassessmentrequest_show_result(client,
                                                                             threat_assessment_request_id,
                                                                             threat_assessment_result_id,
                                                                             select=None,
                                                                             expand=None):
    return client.get_results(threat_assessment_request_id=threat_assessment_request_id,
                              threat_assessment_result_id=threat_assessment_result_id,
                              select=select,
                              expand=expand)


def identitysignins_informationprotectionthreatassessmentrequest_update_result(client,
                                                                               threat_assessment_request_id,
                                                                               threat_assessment_result_id,
                                                                               id_=None,
                                                                               created_date_time=None,
                                                                               message=None,
                                                                               result_type=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if message is not None:
        body['message'] = message
    if result_type is not None:
        body['result_type'] = result_type
    return client.update_results(threat_assessment_request_id=threat_assessment_request_id,
                                 threat_assessment_result_id=threat_assessment_result_id,
                                 body=body)


def identitysignins_invitationsinvitation_create_invitation(client,
                                                            id_=None,
                                                            invited_user_display_name=None,
                                                            invited_user_email_address=None,
                                                            invited_user_type=None,
                                                            invite_redeem_url=None,
                                                            invite_redirect_url=None,
                                                            send_invitation_message=None,
                                                            status=None,
                                                            invited_user=None,
                                                            cc_recipients=None,
                                                            customized_message_body=None,
                                                            message_language=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if invited_user_display_name is not None:
        body['invited_user_display_name'] = invited_user_display_name
    if invited_user_email_address is not None:
        body['invited_user_email_address'] = invited_user_email_address
    if invited_user_type is not None:
        body['invited_user_type'] = invited_user_type
    if invite_redeem_url is not None:
        body['invite_redeem_url'] = invite_redeem_url
    if invite_redirect_url is not None:
        body['invite_redirect_url'] = invite_redirect_url
    if send_invitation_message is not None:
        body['send_invitation_message'] = send_invitation_message
    if status is not None:
        body['status'] = status
    if invited_user is not None:
        body['invited_user'] = invited_user
    body['invited_user_message_info'] = {}
    if cc_recipients is not None:
        body['invited_user_message_info']['cc_recipients'] = cc_recipients
    if customized_message_body is not None:
        body['invited_user_message_info']['customized_message_body'] = customized_message_body
    if message_language is not None:
        body['invited_user_message_info']['message_language'] = message_language
    if len(body['invited_user_message_info']) == 0:
        del body['invited_user_message_info']
    return client.create_invitation(body=body)


def identitysignins_invitationsinvitation_delete_invitation(client,
                                                            invitation_id,
                                                            if_match=None):
    return client.delete_invitation(invitation_id=invitation_id,
                                    if_match=if_match)


def identitysignins_invitationsinvitation_list_invitation(client,
                                                          orderby=None,
                                                          select=None,
                                                          expand=None):
    return client.list_invitation(orderby=orderby,
                                  select=select,
                                  expand=expand)


def identitysignins_invitationsinvitation_show_invitation(client,
                                                          invitation_id,
                                                          select=None,
                                                          expand=None):
    return client.get_invitation(invitation_id=invitation_id,
                                 select=select,
                                 expand=expand)


def identitysignins_invitationsinvitation_update_invitation(client,
                                                            invitation_id,
                                                            id_=None,
                                                            invited_user_display_name=None,
                                                            invited_user_email_address=None,
                                                            invited_user_type=None,
                                                            invite_redeem_url=None,
                                                            invite_redirect_url=None,
                                                            send_invitation_message=None,
                                                            status=None,
                                                            invited_user=None,
                                                            cc_recipients=None,
                                                            customized_message_body=None,
                                                            message_language=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if invited_user_display_name is not None:
        body['invited_user_display_name'] = invited_user_display_name
    if invited_user_email_address is not None:
        body['invited_user_email_address'] = invited_user_email_address
    if invited_user_type is not None:
        body['invited_user_type'] = invited_user_type
    if invite_redeem_url is not None:
        body['invite_redeem_url'] = invite_redeem_url
    if invite_redirect_url is not None:
        body['invite_redirect_url'] = invite_redirect_url
    if send_invitation_message is not None:
        body['send_invitation_message'] = send_invitation_message
    if status is not None:
        body['status'] = status
    if invited_user is not None:
        body['invited_user'] = invited_user
    body['invited_user_message_info'] = {}
    if cc_recipients is not None:
        body['invited_user_message_info']['cc_recipients'] = cc_recipients
    if customized_message_body is not None:
        body['invited_user_message_info']['customized_message_body'] = customized_message_body
    if message_language is not None:
        body['invited_user_message_info']['message_language'] = message_language
    if len(body['invited_user_message_info']) == 0:
        del body['invited_user_message_info']
    return client.update_invitation(invitation_id=invitation_id,
                                    body=body)


def identitysignins_invitation_delete_ref_invited_user(client,
                                                       invitation_id,
                                                       if_match=None):
    return client.delete_ref_invited_user(invitation_id=invitation_id,
                                          if_match=if_match)


def identitysignins_invitation_set_ref_invited_user(client,
                                                    invitation_id,
                                                    body):
    return client.set_ref_invited_user(invitation_id=invitation_id,
                                       body=body)


def identitysignins_invitation_show_invited_user(client,
                                                 invitation_id,
                                                 select=None,
                                                 expand=None):
    return client.get_invited_user(invitation_id=invitation_id,
                                   select=select,
                                   expand=expand)


def identitysignins_invitation_show_ref_invited_user(client,
                                                     invitation_id):
    return client.get_ref_invited_user(invitation_id=invitation_id)


def identitysignins_oauth2permissiongrantsoauth2permissiongrant_create_o_auth2_permission_grant(client,
                                                                                                id_=None,
                                                                                                client_id=None,
                                                                                                consent_type=None,
                                                                                                principal_id=None,
                                                                                                resource_id=None,
                                                                                                scope=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_id is not None:
        body['client_id'] = client_id
    if consent_type is not None:
        body['consent_type'] = consent_type
    if principal_id is not None:
        body['principal_id'] = principal_id
    if resource_id is not None:
        body['resource_id'] = resource_id
    if scope is not None:
        body['scope'] = scope
    return client.create_o_auth2_permission_grant(body=body)


def identitysignins_oauth2permissiongrantsoauth2permissiongrant_delete_o_auth2_permission_grant(client,
                                                                                                o_auth2_permission_grant_id,
                                                                                                if_match=None):
    return client.delete_o_auth2_permission_grant(o_auth2_permission_grant_id=o_auth2_permission_grant_id,
                                                  if_match=if_match)


def identitysignins_oauth2permissiongrantsoauth2permissiongrant_list_o_auth2_permission_grant(client,
                                                                                              orderby=None,
                                                                                              select=None,
                                                                                              expand=None):
    return client.list_o_auth2_permission_grant(orderby=orderby,
                                                select=select,
                                                expand=expand)


def identitysignins_oauth2permissiongrantsoauth2permissiongrant_show_o_auth2_permission_grant(client,
                                                                                              o_auth2_permission_grant_id,
                                                                                              select=None,
                                                                                              expand=None):
    return client.get_o_auth2_permission_grant(o_auth2_permission_grant_id=o_auth2_permission_grant_id,
                                               select=select,
                                               expand=expand)


def identitysignins_oauth2permissiongrantsoauth2permissiongrant_update_o_auth2_permission_grant(client,
                                                                                                o_auth2_permission_grant_id,
                                                                                                id_=None,
                                                                                                client_id=None,
                                                                                                consent_type=None,
                                                                                                principal_id=None,
                                                                                                resource_id=None,
                                                                                                scope=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_id is not None:
        body['client_id'] = client_id
    if consent_type is not None:
        body['consent_type'] = consent_type
    if principal_id is not None:
        body['principal_id'] = principal_id
    if resource_id is not None:
        body['resource_id'] = resource_id
    if scope is not None:
        body['scope'] = scope
    return client.update_o_auth2_permission_grant(o_auth2_permission_grant_id=o_auth2_permission_grant_id,
                                                  body=body)


def identitysignins_oauth2permissiongrant_delta(client):
    return client.delta()


def identitysignins_organization_create_ref_certificate_based_auth_configuration(client,
                                                                                 organization_id,
                                                                                 body):
    return client.create_ref_certificate_based_auth_configuration(organization_id=organization_id,
                                                                  body=body)


def identitysignins_organization_list_certificate_based_auth_configuration(client,
                                                                           organization_id,
                                                                           orderby=None,
                                                                           select=None,
                                                                           expand=None):
    return client.list_certificate_based_auth_configuration(organization_id=organization_id,
                                                            orderby=orderby,
                                                            select=select,
                                                            expand=expand)


def identitysignins_organization_list_ref_certificate_based_auth_configuration(client,
                                                                               organization_id,
                                                                               orderby=None):
    return client.list_ref_certificate_based_auth_configuration(organization_id=organization_id,
                                                                orderby=orderby)


def identitysignins_policiespolicyroot_show_policy_root(client,
                                                        select=None,
                                                        expand=None):
    return client.get_policy_root(select=select,
                                  expand=expand)


def identitysignins_policiespolicyroot_update_policy_root(client,
                                                          id_=None,
                                                          activity_based_timeout_policies=None,
                                                          claims_mapping_policies=None,
                                                          home_realm_discovery_policies=None,
                                                          permission_grant_policies=None,
                                                          token_issuance_policies=None,
                                                          token_lifetime_policies=None,
                                                          conditional_access_policies=None,
                                                          identity_security_defaults_enforcement_policy=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if activity_based_timeout_policies is not None:
        body['activity_based_timeout_policies'] = activity_based_timeout_policies
    if claims_mapping_policies is not None:
        body['claims_mapping_policies'] = claims_mapping_policies
    if home_realm_discovery_policies is not None:
        body['home_realm_discovery_policies'] = home_realm_discovery_policies
    if permission_grant_policies is not None:
        body['permission_grant_policies'] = permission_grant_policies
    if token_issuance_policies is not None:
        body['token_issuance_policies'] = token_issuance_policies
    if token_lifetime_policies is not None:
        body['token_lifetime_policies'] = token_lifetime_policies
    if conditional_access_policies is not None:
        body['conditional_access_policies'] = conditional_access_policies
    if identity_security_defaults_enforcement_policy is not None:
        body['identity_security_defaults_enforcement_policy'] = identity_security_defaults_enforcement_policy
    return client.update_policy_root(body=body)


def identitysignins_policy_create_activity_based_timeout_policy(client,
                                                                id_=None,
                                                                deleted_date_time=None,
                                                                description=None,
                                                                display_name=None,
                                                                definition=None,
                                                                is_organization_default=None,
                                                                applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.create_activity_based_timeout_policies(body=body)


def identitysignins_policy_create_claim_mapping_policy(client,
                                                       id_=None,
                                                       deleted_date_time=None,
                                                       description=None,
                                                       display_name=None,
                                                       definition=None,
                                                       is_organization_default=None,
                                                       applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.create_claims_mapping_policies(body=body)


def identitysignins_policy_create_conditional_access_policy(client,
                                                            id_=None,
                                                            created_date_time=None,
                                                            description=None,
                                                            display_name=None,
                                                            grant_controls=None,
                                                            modified_date_time=None,
                                                            state=None,
                                                            application_enforced_restrictions=None,
                                                            cloud_app_security=None,
                                                            persistent_browser=None,
                                                            sign_in_frequency=None,
                                                            applications=None,
                                                            client_app_types=None,
                                                            locations=None,
                                                            platforms=None,
                                                            sign_in_risk_levels=None,
                                                            users=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if grant_controls is not None:
        body['grant_controls'] = grant_controls
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    if state is not None:
        body['state'] = state
    body['session_controls'] = {}
    if application_enforced_restrictions is not None:
        body['session_controls']['application_enforced_restrictions'] = application_enforced_restrictions
    if cloud_app_security is not None:
        body['session_controls']['cloud_app_security'] = cloud_app_security
    if persistent_browser is not None:
        body['session_controls']['persistent_browser'] = persistent_browser
    if sign_in_frequency is not None:
        body['session_controls']['sign_in_frequency'] = sign_in_frequency
    if len(body['session_controls']) == 0:
        del body['session_controls']
    body['conditions'] = {}
    if applications is not None:
        body['conditions']['applications'] = applications
    if client_app_types is not None:
        body['conditions']['client_app_types'] = client_app_types
    if locations is not None:
        body['conditions']['locations'] = locations
    if platforms is not None:
        body['conditions']['platforms'] = platforms
    if sign_in_risk_levels is not None:
        body['conditions']['sign_in_risk_levels'] = sign_in_risk_levels
    if users is not None:
        body['conditions']['users'] = users
    if len(body['conditions']) == 0:
        del body['conditions']
    return client.create_conditional_access_policies(body=body)


def identitysignins_policy_create_home_realm_discovery_policy(client,
                                                              id_=None,
                                                              deleted_date_time=None,
                                                              description=None,
                                                              display_name=None,
                                                              definition=None,
                                                              is_organization_default=None,
                                                              applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.create_home_realm_discovery_policies(body=body)


def identitysignins_policy_create_permission_grant_policy(client,
                                                          id_=None,
                                                          deleted_date_time=None,
                                                          description=None,
                                                          display_name=None,
                                                          excludes=None,
                                                          includes=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if excludes is not None:
        body['excludes'] = excludes
    if includes is not None:
        body['includes'] = includes
    return client.create_permission_grant_policies(body=body)


def identitysignins_policy_create_token_issuance_policy(client,
                                                        id_=None,
                                                        deleted_date_time=None,
                                                        description=None,
                                                        display_name=None,
                                                        definition=None,
                                                        is_organization_default=None,
                                                        applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.create_token_issuance_policies(body=body)


def identitysignins_policy_create_token_lifetime_policy(client,
                                                        id_=None,
                                                        deleted_date_time=None,
                                                        description=None,
                                                        display_name=None,
                                                        definition=None,
                                                        is_organization_default=None,
                                                        applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.create_token_lifetime_policies(body=body)


def identitysignins_policy_delete_activity_based_timeout_policy(client,
                                                                activity_based_timeout_policy_id,
                                                                if_match=None):
    return client.delete_activity_based_timeout_policies(activity_based_timeout_policy_id=activity_based_timeout_policy_id,
                                                         if_match=if_match)


def identitysignins_policy_delete_claim_mapping_policy(client,
                                                       claims_mapping_policy_id,
                                                       if_match=None):
    return client.delete_claims_mapping_policies(claims_mapping_policy_id=claims_mapping_policy_id,
                                                 if_match=if_match)


def identitysignins_policy_delete_conditional_access_policy(client,
                                                            conditional_access_policy_id,
                                                            if_match=None):
    return client.delete_conditional_access_policies(conditional_access_policy_id=conditional_access_policy_id,
                                                     if_match=if_match)


def identitysignins_policy_delete_home_realm_discovery_policy(client,
                                                              home_realm_discovery_policy_id,
                                                              if_match=None):
    return client.delete_home_realm_discovery_policies(home_realm_discovery_policy_id=home_realm_discovery_policy_id,
                                                       if_match=if_match)


def identitysignins_policy_delete_identity_security_default_enforcement_policy(client,
                                                                               if_match=None):
    return client.delete_identity_security_defaults_enforcement_policy(if_match=if_match)


def identitysignins_policy_delete_permission_grant_policy(client,
                                                          permission_grant_policy_id,
                                                          if_match=None):
    return client.delete_permission_grant_policies(permission_grant_policy_id=permission_grant_policy_id,
                                                   if_match=if_match)


def identitysignins_policy_delete_token_issuance_policy(client,
                                                        token_issuance_policy_id,
                                                        if_match=None):
    return client.delete_token_issuance_policies(token_issuance_policy_id=token_issuance_policy_id,
                                                 if_match=if_match)


def identitysignins_policy_delete_token_lifetime_policy(client,
                                                        token_lifetime_policy_id,
                                                        if_match=None):
    return client.delete_token_lifetime_policies(token_lifetime_policy_id=token_lifetime_policy_id,
                                                 if_match=if_match)


def identitysignins_policy_list_activity_based_timeout_policy(client,
                                                              orderby=None,
                                                              select=None,
                                                              expand=None):
    return client.list_activity_based_timeout_policies(orderby=orderby,
                                                       select=select,
                                                       expand=expand)


def identitysignins_policy_list_claim_mapping_policy(client,
                                                     orderby=None,
                                                     select=None,
                                                     expand=None):
    return client.list_claims_mapping_policies(orderby=orderby,
                                               select=select,
                                               expand=expand)


def identitysignins_policy_list_conditional_access_policy(client,
                                                          orderby=None,
                                                          select=None,
                                                          expand=None):
    return client.list_conditional_access_policies(orderby=orderby,
                                                   select=select,
                                                   expand=expand)


def identitysignins_policy_list_home_realm_discovery_policy(client,
                                                            orderby=None,
                                                            select=None,
                                                            expand=None):
    return client.list_home_realm_discovery_policies(orderby=orderby,
                                                     select=select,
                                                     expand=expand)


def identitysignins_policy_list_permission_grant_policy(client,
                                                        orderby=None,
                                                        select=None,
                                                        expand=None):
    return client.list_permission_grant_policies(orderby=orderby,
                                                 select=select,
                                                 expand=expand)


def identitysignins_policy_list_token_issuance_policy(client,
                                                      orderby=None,
                                                      select=None,
                                                      expand=None):
    return client.list_token_issuance_policies(orderby=orderby,
                                               select=select,
                                               expand=expand)


def identitysignins_policy_list_token_lifetime_policy(client,
                                                      orderby=None,
                                                      select=None,
                                                      expand=None):
    return client.list_token_lifetime_policies(orderby=orderby,
                                               select=select,
                                               expand=expand)


def identitysignins_policy_show_activity_based_timeout_policy(client,
                                                              activity_based_timeout_policy_id,
                                                              select=None,
                                                              expand=None):
    return client.get_activity_based_timeout_policies(activity_based_timeout_policy_id=activity_based_timeout_policy_id,
                                                      select=select,
                                                      expand=expand)


def identitysignins_policy_show_claim_mapping_policy(client,
                                                     claims_mapping_policy_id,
                                                     select=None,
                                                     expand=None):
    return client.get_claims_mapping_policies(claims_mapping_policy_id=claims_mapping_policy_id,
                                              select=select,
                                              expand=expand)


def identitysignins_policy_show_conditional_access_policy(client,
                                                          conditional_access_policy_id,
                                                          select=None,
                                                          expand=None):
    return client.get_conditional_access_policies(conditional_access_policy_id=conditional_access_policy_id,
                                                  select=select,
                                                  expand=expand)


def identitysignins_policy_show_home_realm_discovery_policy(client,
                                                            home_realm_discovery_policy_id,
                                                            select=None,
                                                            expand=None):
    return client.get_home_realm_discovery_policies(home_realm_discovery_policy_id=home_realm_discovery_policy_id,
                                                    select=select,
                                                    expand=expand)


def identitysignins_policy_show_identity_security_default_enforcement_policy(client,
                                                                             select=None,
                                                                             expand=None):
    return client.get_identity_security_defaults_enforcement_policy(select=select,
                                                                    expand=expand)


def identitysignins_policy_show_permission_grant_policy(client,
                                                        permission_grant_policy_id,
                                                        select=None,
                                                        expand=None):
    return client.get_permission_grant_policies(permission_grant_policy_id=permission_grant_policy_id,
                                                select=select,
                                                expand=expand)


def identitysignins_policy_show_token_issuance_policy(client,
                                                      token_issuance_policy_id,
                                                      select=None,
                                                      expand=None):
    return client.get_token_issuance_policies(token_issuance_policy_id=token_issuance_policy_id,
                                              select=select,
                                              expand=expand)


def identitysignins_policy_show_token_lifetime_policy(client,
                                                      token_lifetime_policy_id,
                                                      select=None,
                                                      expand=None):
    return client.get_token_lifetime_policies(token_lifetime_policy_id=token_lifetime_policy_id,
                                              select=select,
                                              expand=expand)


def identitysignins_policy_update_activity_based_timeout_policy(client,
                                                                activity_based_timeout_policy_id,
                                                                id_=None,
                                                                deleted_date_time=None,
                                                                description=None,
                                                                display_name=None,
                                                                definition=None,
                                                                is_organization_default=None,
                                                                applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.update_activity_based_timeout_policies(activity_based_timeout_policy_id=activity_based_timeout_policy_id,
                                                         body=body)


def identitysignins_policy_update_claim_mapping_policy(client,
                                                       claims_mapping_policy_id,
                                                       id_=None,
                                                       deleted_date_time=None,
                                                       description=None,
                                                       display_name=None,
                                                       definition=None,
                                                       is_organization_default=None,
                                                       applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.update_claims_mapping_policies(claims_mapping_policy_id=claims_mapping_policy_id,
                                                 body=body)


def identitysignins_policy_update_conditional_access_policy(client,
                                                            conditional_access_policy_id,
                                                            id_=None,
                                                            created_date_time=None,
                                                            description=None,
                                                            display_name=None,
                                                            grant_controls=None,
                                                            modified_date_time=None,
                                                            state=None,
                                                            application_enforced_restrictions=None,
                                                            cloud_app_security=None,
                                                            persistent_browser=None,
                                                            sign_in_frequency=None,
                                                            applications=None,
                                                            client_app_types=None,
                                                            locations=None,
                                                            platforms=None,
                                                            sign_in_risk_levels=None,
                                                            users=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if created_date_time is not None:
        body['created_date_time'] = created_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if grant_controls is not None:
        body['grant_controls'] = grant_controls
    if modified_date_time is not None:
        body['modified_date_time'] = modified_date_time
    if state is not None:
        body['state'] = state
    body['session_controls'] = {}
    if application_enforced_restrictions is not None:
        body['session_controls']['application_enforced_restrictions'] = application_enforced_restrictions
    if cloud_app_security is not None:
        body['session_controls']['cloud_app_security'] = cloud_app_security
    if persistent_browser is not None:
        body['session_controls']['persistent_browser'] = persistent_browser
    if sign_in_frequency is not None:
        body['session_controls']['sign_in_frequency'] = sign_in_frequency
    if len(body['session_controls']) == 0:
        del body['session_controls']
    body['conditions'] = {}
    if applications is not None:
        body['conditions']['applications'] = applications
    if client_app_types is not None:
        body['conditions']['client_app_types'] = client_app_types
    if locations is not None:
        body['conditions']['locations'] = locations
    if platforms is not None:
        body['conditions']['platforms'] = platforms
    if sign_in_risk_levels is not None:
        body['conditions']['sign_in_risk_levels'] = sign_in_risk_levels
    if users is not None:
        body['conditions']['users'] = users
    if len(body['conditions']) == 0:
        del body['conditions']
    return client.update_conditional_access_policies(conditional_access_policy_id=conditional_access_policy_id,
                                                     body=body)


def identitysignins_policy_update_home_realm_discovery_policy(client,
                                                              home_realm_discovery_policy_id,
                                                              id_=None,
                                                              deleted_date_time=None,
                                                              description=None,
                                                              display_name=None,
                                                              definition=None,
                                                              is_organization_default=None,
                                                              applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.update_home_realm_discovery_policies(home_realm_discovery_policy_id=home_realm_discovery_policy_id,
                                                       body=body)


def identitysignins_policy_update_identity_security_default_enforcement_policy(client,
                                                                               id_=None,
                                                                               deleted_date_time=None,
                                                                               description=None,
                                                                               display_name=None,
                                                                               is_enabled=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if is_enabled is not None:
        body['is_enabled'] = is_enabled
    return client.update_identity_security_defaults_enforcement_policy(body=body)


def identitysignins_policy_update_permission_grant_policy(client,
                                                          permission_grant_policy_id,
                                                          id_=None,
                                                          deleted_date_time=None,
                                                          description=None,
                                                          display_name=None,
                                                          excludes=None,
                                                          includes=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if excludes is not None:
        body['excludes'] = excludes
    if includes is not None:
        body['includes'] = includes
    return client.update_permission_grant_policies(permission_grant_policy_id=permission_grant_policy_id,
                                                   body=body)


def identitysignins_policy_update_token_issuance_policy(client,
                                                        token_issuance_policy_id,
                                                        id_=None,
                                                        deleted_date_time=None,
                                                        description=None,
                                                        display_name=None,
                                                        definition=None,
                                                        is_organization_default=None,
                                                        applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.update_token_issuance_policies(token_issuance_policy_id=token_issuance_policy_id,
                                                 body=body)


def identitysignins_policy_update_token_lifetime_policy(client,
                                                        token_lifetime_policy_id,
                                                        id_=None,
                                                        deleted_date_time=None,
                                                        description=None,
                                                        display_name=None,
                                                        definition=None,
                                                        is_organization_default=None,
                                                        applies_to=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if deleted_date_time is not None:
        body['deleted_date_time'] = deleted_date_time
    if description is not None:
        body['description'] = description
    if display_name is not None:
        body['display_name'] = display_name
    if definition is not None:
        body['definition'] = definition
    if is_organization_default is not None:
        body['is_organization_default'] = is_organization_default
    if applies_to is not None:
        body['applies_to'] = applies_to
    return client.update_token_lifetime_policies(token_lifetime_policy_id=token_lifetime_policy_id,
                                                 body=body)


def identitysignins_policiespermissiongrantpolicy_create_exclude(client,
                                                                 permission_grant_policy_id,
                                                                 id_=None,
                                                                 client_application_ids=None,
                                                                 client_application_publisher_ids=None,
                                                                 client_applications_from_verified_publisher_only=None,
                                                                 client_application_tenant_ids=None,
                                                                 permission_classification=None,
                                                                 permissions=None,
                                                                 permission_type=None,
                                                                 resource_application=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_application_ids is not None:
        body['client_application_ids'] = client_application_ids
    if client_application_publisher_ids is not None:
        body['client_application_publisher_ids'] = client_application_publisher_ids
    if client_applications_from_verified_publisher_only is not None:
        body['client_applications_from_verified_publisher_only'] = client_applications_from_verified_publisher_only
    if client_application_tenant_ids is not None:
        body['client_application_tenant_ids'] = client_application_tenant_ids
    if permission_classification is not None:
        body['permission_classification'] = permission_classification
    if permissions is not None:
        body['permissions'] = permissions
    if permission_type is not None:
        body['permission_type'] = permission_type
    if resource_application is not None:
        body['resource_application'] = resource_application
    return client.create_excludes(permission_grant_policy_id=permission_grant_policy_id,
                                  body=body)


def identitysignins_policiespermissiongrantpolicy_create_include(client,
                                                                 permission_grant_policy_id,
                                                                 id_=None,
                                                                 client_application_ids=None,
                                                                 client_application_publisher_ids=None,
                                                                 client_applications_from_verified_publisher_only=None,
                                                                 client_application_tenant_ids=None,
                                                                 permission_classification=None,
                                                                 permissions=None,
                                                                 permission_type=None,
                                                                 resource_application=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_application_ids is not None:
        body['client_application_ids'] = client_application_ids
    if client_application_publisher_ids is not None:
        body['client_application_publisher_ids'] = client_application_publisher_ids
    if client_applications_from_verified_publisher_only is not None:
        body['client_applications_from_verified_publisher_only'] = client_applications_from_verified_publisher_only
    if client_application_tenant_ids is not None:
        body['client_application_tenant_ids'] = client_application_tenant_ids
    if permission_classification is not None:
        body['permission_classification'] = permission_classification
    if permissions is not None:
        body['permissions'] = permissions
    if permission_type is not None:
        body['permission_type'] = permission_type
    if resource_application is not None:
        body['resource_application'] = resource_application
    return client.create_includes(permission_grant_policy_id=permission_grant_policy_id,
                                  body=body)


def identitysignins_policiespermissiongrantpolicy_delete_exclude(client,
                                                                 permission_grant_policy_id,
                                                                 permission_grant_condition_set_id,
                                                                 if_match=None):
    return client.delete_excludes(permission_grant_policy_id=permission_grant_policy_id,
                                  permission_grant_condition_set_id=permission_grant_condition_set_id,
                                  if_match=if_match)


def identitysignins_policiespermissiongrantpolicy_delete_include(client,
                                                                 permission_grant_policy_id,
                                                                 permission_grant_condition_set_id,
                                                                 if_match=None):
    return client.delete_includes(permission_grant_policy_id=permission_grant_policy_id,
                                  permission_grant_condition_set_id=permission_grant_condition_set_id,
                                  if_match=if_match)


def identitysignins_policiespermissiongrantpolicy_list_exclude(client,
                                                               permission_grant_policy_id,
                                                               orderby=None,
                                                               select=None,
                                                               expand=None):
    return client.list_excludes(permission_grant_policy_id=permission_grant_policy_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def identitysignins_policiespermissiongrantpolicy_list_include(client,
                                                               permission_grant_policy_id,
                                                               orderby=None,
                                                               select=None,
                                                               expand=None):
    return client.list_includes(permission_grant_policy_id=permission_grant_policy_id,
                                orderby=orderby,
                                select=select,
                                expand=expand)


def identitysignins_policiespermissiongrantpolicy_show_exclude(client,
                                                               permission_grant_policy_id,
                                                               permission_grant_condition_set_id,
                                                               select=None,
                                                               expand=None):
    return client.get_excludes(permission_grant_policy_id=permission_grant_policy_id,
                               permission_grant_condition_set_id=permission_grant_condition_set_id,
                               select=select,
                               expand=expand)


def identitysignins_policiespermissiongrantpolicy_show_include(client,
                                                               permission_grant_policy_id,
                                                               permission_grant_condition_set_id,
                                                               select=None,
                                                               expand=None):
    return client.get_includes(permission_grant_policy_id=permission_grant_policy_id,
                               permission_grant_condition_set_id=permission_grant_condition_set_id,
                               select=select,
                               expand=expand)


def identitysignins_policiespermissiongrantpolicy_update_exclude(client,
                                                                 permission_grant_policy_id,
                                                                 permission_grant_condition_set_id,
                                                                 id_=None,
                                                                 client_application_ids=None,
                                                                 client_application_publisher_ids=None,
                                                                 client_applications_from_verified_publisher_only=None,
                                                                 client_application_tenant_ids=None,
                                                                 permission_classification=None,
                                                                 permissions=None,
                                                                 permission_type=None,
                                                                 resource_application=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_application_ids is not None:
        body['client_application_ids'] = client_application_ids
    if client_application_publisher_ids is not None:
        body['client_application_publisher_ids'] = client_application_publisher_ids
    if client_applications_from_verified_publisher_only is not None:
        body['client_applications_from_verified_publisher_only'] = client_applications_from_verified_publisher_only
    if client_application_tenant_ids is not None:
        body['client_application_tenant_ids'] = client_application_tenant_ids
    if permission_classification is not None:
        body['permission_classification'] = permission_classification
    if permissions is not None:
        body['permissions'] = permissions
    if permission_type is not None:
        body['permission_type'] = permission_type
    if resource_application is not None:
        body['resource_application'] = resource_application
    return client.update_excludes(permission_grant_policy_id=permission_grant_policy_id,
                                  permission_grant_condition_set_id=permission_grant_condition_set_id,
                                  body=body)


def identitysignins_policiespermissiongrantpolicy_update_include(client,
                                                                 permission_grant_policy_id,
                                                                 permission_grant_condition_set_id,
                                                                 id_=None,
                                                                 client_application_ids=None,
                                                                 client_application_publisher_ids=None,
                                                                 client_applications_from_verified_publisher_only=None,
                                                                 client_application_tenant_ids=None,
                                                                 permission_classification=None,
                                                                 permissions=None,
                                                                 permission_type=None,
                                                                 resource_application=None):
    body = {}
    if id_ is not None:
        body['id'] = id_
    if client_application_ids is not None:
        body['client_application_ids'] = client_application_ids
    if client_application_publisher_ids is not None:
        body['client_application_publisher_ids'] = client_application_publisher_ids
    if client_applications_from_verified_publisher_only is not None:
        body['client_applications_from_verified_publisher_only'] = client_applications_from_verified_publisher_only
    if client_application_tenant_ids is not None:
        body['client_application_tenant_ids'] = client_application_tenant_ids
    if permission_classification is not None:
        body['permission_classification'] = permission_classification
    if permissions is not None:
        body['permissions'] = permissions
    if permission_type is not None:
        body['permission_type'] = permission_type
    if resource_application is not None:
        body['resource_application'] = resource_application
    return client.update_includes(permission_grant_policy_id=permission_grant_policy_id,
                                  permission_grant_condition_set_id=permission_grant_condition_set_id,
                                  body=body)
