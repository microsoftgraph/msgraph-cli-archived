# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class policiesOperations(object):
    """policiesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_activity_based_timeout_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum114"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum115"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum116"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofactivitybasedtimeoutpolicy"]
        """Get activityBasedTimeoutPolicies from policies.

        Get activityBasedTimeoutPolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum114]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum115]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum116]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofactivitybasedtimeoutpolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionofactivitybasedtimeoutpolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofactivitybasedtimeoutpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_activity_based_timeout_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofactivitybasedtimeoutpolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_activity_based_timeout_policies.metadata = {'url': '/policies/activityBasedTimeoutPolicies'}  # type: ignore

    def create_activity_based_timeout_policies(
        self,
        body,  # type: "models.microsoftgraphactivitybasedtimeoutpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphactivitybasedtimeoutpolicy"
        """Create new navigation property to activityBasedTimeoutPolicies for policies.

        Create new navigation property to activityBasedTimeoutPolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphactivitybasedtimeoutpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphactivitybasedtimeoutpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphactivitybasedtimeoutpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphactivitybasedtimeoutpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_activity_based_timeout_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphactivitybasedtimeoutpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphactivitybasedtimeoutpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_activity_based_timeout_policies.metadata = {'url': '/policies/activityBasedTimeoutPolicies'}  # type: ignore

    def get_activity_based_timeout_policies(
        self,
        activity_based_timeout_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum117"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum118"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphactivitybasedtimeoutpolicy"
        """Get activityBasedTimeoutPolicies from policies.

        Get activityBasedTimeoutPolicies from policies.

        :param activity_based_timeout_policy_id: key: id of activityBasedTimeoutPolicy.
        :type activity_based_timeout_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum117]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum118]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphactivitybasedtimeoutpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphactivitybasedtimeoutpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphactivitybasedtimeoutpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activity_based_timeout_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'activityBasedTimeoutPolicy-id': self._serialize.url("activity_based_timeout_policy_id", activity_based_timeout_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphactivitybasedtimeoutpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity_based_timeout_policies.metadata = {'url': '/policies/activityBasedTimeoutPolicies/{activityBasedTimeoutPolicy-id}'}  # type: ignore

    def update_activity_based_timeout_policies(
        self,
        activity_based_timeout_policy_id,  # type: str
        body,  # type: "models.microsoftgraphactivitybasedtimeoutpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property activityBasedTimeoutPolicies in policies.

        Update the navigation property activityBasedTimeoutPolicies in policies.

        :param activity_based_timeout_policy_id: key: id of activityBasedTimeoutPolicy.
        :type activity_based_timeout_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphactivitybasedtimeoutpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_activity_based_timeout_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'activityBasedTimeoutPolicy-id': self._serialize.url("activity_based_timeout_policy_id", activity_based_timeout_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphactivitybasedtimeoutpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_activity_based_timeout_policies.metadata = {'url': '/policies/activityBasedTimeoutPolicies/{activityBasedTimeoutPolicy-id}'}  # type: ignore

    def delete_activity_based_timeout_policies(
        self,
        activity_based_timeout_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property activityBasedTimeoutPolicies for policies.

        Delete navigation property activityBasedTimeoutPolicies for policies.

        :param activity_based_timeout_policy_id: key: id of activityBasedTimeoutPolicy.
        :type activity_based_timeout_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_activity_based_timeout_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'activityBasedTimeoutPolicy-id': self._serialize.url("activity_based_timeout_policy_id", activity_based_timeout_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_activity_based_timeout_policies.metadata = {'url': '/policies/activityBasedTimeoutPolicies/{activityBasedTimeoutPolicy-id}'}  # type: ignore

    def list_claims_mapping_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum119"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum120"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum121"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofclaimsmappingpolicy"]
        """Get claimsMappingPolicies from policies.

        Get claimsMappingPolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum119]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum120]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum121]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofclaimsmappingpolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionofclaimsmappingpolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofclaimsmappingpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_claims_mapping_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofclaimsmappingpolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_claims_mapping_policies.metadata = {'url': '/policies/claimsMappingPolicies'}  # type: ignore

    def create_claims_mapping_policies(
        self,
        body,  # type: "models.microsoftgraphclaimsmappingpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphclaimsmappingpolicy"
        """Create new navigation property to claimsMappingPolicies for policies.

        Create new navigation property to claimsMappingPolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphclaimsmappingpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphclaimsmappingpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphclaimsmappingpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphclaimsmappingpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_claims_mapping_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphclaimsmappingpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphclaimsmappingpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_claims_mapping_policies.metadata = {'url': '/policies/claimsMappingPolicies'}  # type: ignore

    def get_claims_mapping_policies(
        self,
        claims_mapping_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum122"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum123"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphclaimsmappingpolicy"
        """Get claimsMappingPolicies from policies.

        Get claimsMappingPolicies from policies.

        :param claims_mapping_policy_id: key: id of claimsMappingPolicy.
        :type claims_mapping_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum122]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum123]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphclaimsmappingpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphclaimsmappingpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphclaimsmappingpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_claims_mapping_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'claimsMappingPolicy-id': self._serialize.url("claims_mapping_policy_id", claims_mapping_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphclaimsmappingpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_claims_mapping_policies.metadata = {'url': '/policies/claimsMappingPolicies/{claimsMappingPolicy-id}'}  # type: ignore

    def update_claims_mapping_policies(
        self,
        claims_mapping_policy_id,  # type: str
        body,  # type: "models.microsoftgraphclaimsmappingpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property claimsMappingPolicies in policies.

        Update the navigation property claimsMappingPolicies in policies.

        :param claims_mapping_policy_id: key: id of claimsMappingPolicy.
        :type claims_mapping_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphclaimsmappingpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_claims_mapping_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'claimsMappingPolicy-id': self._serialize.url("claims_mapping_policy_id", claims_mapping_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphclaimsmappingpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_claims_mapping_policies.metadata = {'url': '/policies/claimsMappingPolicies/{claimsMappingPolicy-id}'}  # type: ignore

    def delete_claims_mapping_policies(
        self,
        claims_mapping_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property claimsMappingPolicies for policies.

        Delete navigation property claimsMappingPolicies for policies.

        :param claims_mapping_policy_id: key: id of claimsMappingPolicy.
        :type claims_mapping_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_claims_mapping_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'claimsMappingPolicy-id': self._serialize.url("claims_mapping_policy_id", claims_mapping_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_claims_mapping_policies.metadata = {'url': '/policies/claimsMappingPolicies/{claimsMappingPolicy-id}'}  # type: ignore

    def list_conditional_access_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum124"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum125"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofconditionalaccesspolicy0"]
        """Get conditionalAccessPolicies from policies.

        Get conditionalAccessPolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum124]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum125]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofconditionalaccesspolicy0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionofconditionalaccesspolicy0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofconditionalaccesspolicy0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_conditional_access_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofconditionalaccesspolicy0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_conditional_access_policies.metadata = {'url': '/policies/conditionalAccessPolicies'}  # type: ignore

    def create_conditional_access_policies(
        self,
        body,  # type: "models.microsoftgraphconditionalaccesspolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphconditionalaccesspolicy"
        """Create new navigation property to conditionalAccessPolicies for policies.

        Create new navigation property to conditionalAccessPolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphconditionalaccesspolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphconditionalaccesspolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphconditionalaccesspolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphconditionalaccesspolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_conditional_access_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphconditionalaccesspolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphconditionalaccesspolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_conditional_access_policies.metadata = {'url': '/policies/conditionalAccessPolicies'}  # type: ignore

    def get_conditional_access_policies(
        self,
        conditional_access_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum126"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphconditionalaccesspolicy"
        """Get conditionalAccessPolicies from policies.

        Get conditionalAccessPolicies from policies.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum126]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphconditionalaccesspolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphconditionalaccesspolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphconditionalaccesspolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_conditional_access_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphconditionalaccesspolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_conditional_access_policies.metadata = {'url': '/policies/conditionalAccessPolicies/{conditionalAccessPolicy-id}'}  # type: ignore

    def update_conditional_access_policies(
        self,
        conditional_access_policy_id,  # type: str
        body,  # type: "models.microsoftgraphconditionalaccesspolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property conditionalAccessPolicies in policies.

        Update the navigation property conditionalAccessPolicies in policies.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphconditionalaccesspolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_conditional_access_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphconditionalaccesspolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_conditional_access_policies.metadata = {'url': '/policies/conditionalAccessPolicies/{conditionalAccessPolicy-id}'}  # type: ignore

    def delete_conditional_access_policies(
        self,
        conditional_access_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property conditionalAccessPolicies for policies.

        Delete navigation property conditionalAccessPolicies for policies.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_conditional_access_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_conditional_access_policies.metadata = {'url': '/policies/conditionalAccessPolicies/{conditionalAccessPolicy-id}'}  # type: ignore

    def list_home_realm_discovery_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum127"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum128"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum129"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofhomerealmdiscoverypolicy"]
        """Get homeRealmDiscoveryPolicies from policies.

        Get homeRealmDiscoveryPolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum127]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum128]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum129]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofhomerealmdiscoverypolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionofhomerealmdiscoverypolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofhomerealmdiscoverypolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_home_realm_discovery_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofhomerealmdiscoverypolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_home_realm_discovery_policies.metadata = {'url': '/policies/homeRealmDiscoveryPolicies'}  # type: ignore

    def create_home_realm_discovery_policies(
        self,
        body,  # type: "models.microsoftgraphhomerealmdiscoverypolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphhomerealmdiscoverypolicy"
        """Create new navigation property to homeRealmDiscoveryPolicies for policies.

        Create new navigation property to homeRealmDiscoveryPolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphhomerealmdiscoverypolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphhomerealmdiscoverypolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphhomerealmdiscoverypolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphhomerealmdiscoverypolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_home_realm_discovery_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphhomerealmdiscoverypolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphhomerealmdiscoverypolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_home_realm_discovery_policies.metadata = {'url': '/policies/homeRealmDiscoveryPolicies'}  # type: ignore

    def get_home_realm_discovery_policies(
        self,
        home_realm_discovery_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum130"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum131"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphhomerealmdiscoverypolicy"
        """Get homeRealmDiscoveryPolicies from policies.

        Get homeRealmDiscoveryPolicies from policies.

        :param home_realm_discovery_policy_id: key: id of homeRealmDiscoveryPolicy.
        :type home_realm_discovery_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum130]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum131]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphhomerealmdiscoverypolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphhomerealmdiscoverypolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphhomerealmdiscoverypolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_home_realm_discovery_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'homeRealmDiscoveryPolicy-id': self._serialize.url("home_realm_discovery_policy_id", home_realm_discovery_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphhomerealmdiscoverypolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_home_realm_discovery_policies.metadata = {'url': '/policies/homeRealmDiscoveryPolicies/{homeRealmDiscoveryPolicy-id}'}  # type: ignore

    def update_home_realm_discovery_policies(
        self,
        home_realm_discovery_policy_id,  # type: str
        body,  # type: "models.microsoftgraphhomerealmdiscoverypolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property homeRealmDiscoveryPolicies in policies.

        Update the navigation property homeRealmDiscoveryPolicies in policies.

        :param home_realm_discovery_policy_id: key: id of homeRealmDiscoveryPolicy.
        :type home_realm_discovery_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphhomerealmdiscoverypolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_home_realm_discovery_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'homeRealmDiscoveryPolicy-id': self._serialize.url("home_realm_discovery_policy_id", home_realm_discovery_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphhomerealmdiscoverypolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_home_realm_discovery_policies.metadata = {'url': '/policies/homeRealmDiscoveryPolicies/{homeRealmDiscoveryPolicy-id}'}  # type: ignore

    def delete_home_realm_discovery_policies(
        self,
        home_realm_discovery_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property homeRealmDiscoveryPolicies for policies.

        Delete navigation property homeRealmDiscoveryPolicies for policies.

        :param home_realm_discovery_policy_id: key: id of homeRealmDiscoveryPolicy.
        :type home_realm_discovery_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_home_realm_discovery_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'homeRealmDiscoveryPolicy-id': self._serialize.url("home_realm_discovery_policy_id", home_realm_discovery_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_home_realm_discovery_policies.metadata = {'url': '/policies/homeRealmDiscoveryPolicies/{homeRealmDiscoveryPolicy-id}'}  # type: ignore

    def get_identity_security_defaults_enforcement_policy(
        self,
        select=None,  # type: Optional[List[Union[str, "models.Enum132"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphidentitysecuritydefaultsenforcementpolicy"
        """Get identitySecurityDefaultsEnforcementPolicy from policies.

        Get identitySecurityDefaultsEnforcementPolicy from policies.

        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum132]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphidentitysecuritydefaultsenforcementpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphidentitysecuritydefaultsenforcementpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphidentitysecuritydefaultsenforcementpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_identity_security_defaults_enforcement_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphidentitysecuritydefaultsenforcementpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_identity_security_defaults_enforcement_policy.metadata = {'url': '/policies/identitySecurityDefaultsEnforcementPolicy'}  # type: ignore

    def update_identity_security_defaults_enforcement_policy(
        self,
        body,  # type: "models.microsoftgraphidentitysecuritydefaultsenforcementpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property identitySecurityDefaultsEnforcementPolicy in policies.

        Update the navigation property identitySecurityDefaultsEnforcementPolicy in policies.

        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphidentitysecuritydefaultsenforcementpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_identity_security_defaults_enforcement_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphidentitysecuritydefaultsenforcementpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_identity_security_defaults_enforcement_policy.metadata = {'url': '/policies/identitySecurityDefaultsEnforcementPolicy'}  # type: ignore

    def delete_identity_security_defaults_enforcement_policy(
        self,
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property identitySecurityDefaultsEnforcementPolicy for policies.

        Delete navigation property identitySecurityDefaultsEnforcementPolicy for policies.

        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_identity_security_defaults_enforcement_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_identity_security_defaults_enforcement_policy.metadata = {'url': '/policies/identitySecurityDefaultsEnforcementPolicy'}  # type: ignore

    def list_permission_grant_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum133"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum134"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum135"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofpermissiongrantpolicy"]
        """Get permissionGrantPolicies from policies.

        Get permissionGrantPolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum133]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum134]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum135]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofpermissiongrantpolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionofpermissiongrantpolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofpermissiongrantpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_permission_grant_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofpermissiongrantpolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_permission_grant_policies.metadata = {'url': '/policies/permissionGrantPolicies'}  # type: ignore

    def create_permission_grant_policies(
        self,
        body,  # type: "models.microsoftgraphpermissiongrantpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphpermissiongrantpolicy"
        """Create new navigation property to permissionGrantPolicies for policies.

        Create new navigation property to permissionGrantPolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphpermissiongrantpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphpermissiongrantpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphpermissiongrantpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphpermissiongrantpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_permission_grant_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphpermissiongrantpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphpermissiongrantpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_permission_grant_policies.metadata = {'url': '/policies/permissionGrantPolicies'}  # type: ignore

    def get_permission_grant_policies(
        self,
        permission_grant_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum136"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum137"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphpermissiongrantpolicy"
        """Get permissionGrantPolicies from policies.

        Get permissionGrantPolicies from policies.

        :param permission_grant_policy_id: key: id of permissionGrantPolicy.
        :type permission_grant_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum136]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum137]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphpermissiongrantpolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphpermissiongrantpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphpermissiongrantpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_permission_grant_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'permissionGrantPolicy-id': self._serialize.url("permission_grant_policy_id", permission_grant_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphpermissiongrantpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_permission_grant_policies.metadata = {'url': '/policies/permissionGrantPolicies/{permissionGrantPolicy-id}'}  # type: ignore

    def update_permission_grant_policies(
        self,
        permission_grant_policy_id,  # type: str
        body,  # type: "models.microsoftgraphpermissiongrantpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property permissionGrantPolicies in policies.

        Update the navigation property permissionGrantPolicies in policies.

        :param permission_grant_policy_id: key: id of permissionGrantPolicy.
        :type permission_grant_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphpermissiongrantpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_permission_grant_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'permissionGrantPolicy-id': self._serialize.url("permission_grant_policy_id", permission_grant_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphpermissiongrantpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_permission_grant_policies.metadata = {'url': '/policies/permissionGrantPolicies/{permissionGrantPolicy-id}'}  # type: ignore

    def delete_permission_grant_policies(
        self,
        permission_grant_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property permissionGrantPolicies for policies.

        Delete navigation property permissionGrantPolicies for policies.

        :param permission_grant_policy_id: key: id of permissionGrantPolicy.
        :type permission_grant_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_permission_grant_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'permissionGrantPolicy-id': self._serialize.url("permission_grant_policy_id", permission_grant_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_permission_grant_policies.metadata = {'url': '/policies/permissionGrantPolicies/{permissionGrantPolicy-id}'}  # type: ignore

    def list_token_issuance_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum144"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum145"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum146"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoftokenissuancepolicy"]
        """Get tokenIssuancePolicies from policies.

        Get tokenIssuancePolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum144]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum145]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum146]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoftokenissuancepolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionoftokenissuancepolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoftokenissuancepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_token_issuance_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoftokenissuancepolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_token_issuance_policies.metadata = {'url': '/policies/tokenIssuancePolicies'}  # type: ignore

    def create_token_issuance_policies(
        self,
        body,  # type: "models.microsoftgraphtokenissuancepolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtokenissuancepolicy"
        """Create new navigation property to tokenIssuancePolicies for policies.

        Create new navigation property to tokenIssuancePolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphtokenissuancepolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtokenissuancepolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphtokenissuancepolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtokenissuancepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_token_issuance_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtokenissuancepolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtokenissuancepolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_token_issuance_policies.metadata = {'url': '/policies/tokenIssuancePolicies'}  # type: ignore

    def get_token_issuance_policies(
        self,
        token_issuance_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum147"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum148"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtokenissuancepolicy"
        """Get tokenIssuancePolicies from policies.

        Get tokenIssuancePolicies from policies.

        :param token_issuance_policy_id: key: id of tokenIssuancePolicy.
        :type token_issuance_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum147]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum148]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtokenissuancepolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphtokenissuancepolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtokenissuancepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_token_issuance_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenIssuancePolicy-id': self._serialize.url("token_issuance_policy_id", token_issuance_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtokenissuancepolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_token_issuance_policies.metadata = {'url': '/policies/tokenIssuancePolicies/{tokenIssuancePolicy-id}'}  # type: ignore

    def update_token_issuance_policies(
        self,
        token_issuance_policy_id,  # type: str
        body,  # type: "models.microsoftgraphtokenissuancepolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property tokenIssuancePolicies in policies.

        Update the navigation property tokenIssuancePolicies in policies.

        :param token_issuance_policy_id: key: id of tokenIssuancePolicy.
        :type token_issuance_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphtokenissuancepolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_token_issuance_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenIssuancePolicy-id': self._serialize.url("token_issuance_policy_id", token_issuance_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtokenissuancepolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_token_issuance_policies.metadata = {'url': '/policies/tokenIssuancePolicies/{tokenIssuancePolicy-id}'}  # type: ignore

    def delete_token_issuance_policies(
        self,
        token_issuance_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property tokenIssuancePolicies for policies.

        Delete navigation property tokenIssuancePolicies for policies.

        :param token_issuance_policy_id: key: id of tokenIssuancePolicy.
        :type token_issuance_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_token_issuance_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenIssuancePolicy-id': self._serialize.url("token_issuance_policy_id", token_issuance_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_token_issuance_policies.metadata = {'url': '/policies/tokenIssuancePolicies/{tokenIssuancePolicy-id}'}  # type: ignore

    def list_token_lifetime_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum149"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum150"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum151"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoftokenlifetimepolicy"]
        """Get tokenLifetimePolicies from policies.

        Get tokenLifetimePolicies from policies.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum149]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum150]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum151]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoftokenlifetimepolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.collectionoftokenlifetimepolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoftokenlifetimepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_token_lifetime_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoftokenlifetimepolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_token_lifetime_policies.metadata = {'url': '/policies/tokenLifetimePolicies'}  # type: ignore

    def create_token_lifetime_policies(
        self,
        body,  # type: "models.microsoftgraphtokenlifetimepolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtokenlifetimepolicy"
        """Create new navigation property to tokenLifetimePolicies for policies.

        Create new navigation property to tokenLifetimePolicies for policies.

        :param body: New navigation property.
        :type body: ~identity_sign_ins.models.microsoftgraphtokenlifetimepolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtokenlifetimepolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphtokenlifetimepolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtokenlifetimepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_token_lifetime_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtokenlifetimepolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtokenlifetimepolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_token_lifetime_policies.metadata = {'url': '/policies/tokenLifetimePolicies'}  # type: ignore

    def get_token_lifetime_policies(
        self,
        token_lifetime_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum152"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum153"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtokenlifetimepolicy"
        """Get tokenLifetimePolicies from policies.

        Get tokenLifetimePolicies from policies.

        :param token_lifetime_policy_id: key: id of tokenLifetimePolicy.
        :type token_lifetime_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum152]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_sign_ins.models.Enum153]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtokenlifetimepolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.microsoftgraphtokenlifetimepolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtokenlifetimepolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_token_lifetime_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenLifetimePolicy-id': self._serialize.url("token_lifetime_policy_id", token_lifetime_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtokenlifetimepolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_token_lifetime_policies.metadata = {'url': '/policies/tokenLifetimePolicies/{tokenLifetimePolicy-id}'}  # type: ignore

    def update_token_lifetime_policies(
        self,
        token_lifetime_policy_id,  # type: str
        body,  # type: "models.microsoftgraphtokenlifetimepolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property tokenLifetimePolicies in policies.

        Update the navigation property tokenLifetimePolicies in policies.

        :param token_lifetime_policy_id: key: id of tokenLifetimePolicy.
        :type token_lifetime_policy_id: str
        :param body: New navigation property values.
        :type body: ~identity_sign_ins.models.microsoftgraphtokenlifetimepolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_token_lifetime_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenLifetimePolicy-id': self._serialize.url("token_lifetime_policy_id", token_lifetime_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtokenlifetimepolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_token_lifetime_policies.metadata = {'url': '/policies/tokenLifetimePolicies/{tokenLifetimePolicy-id}'}  # type: ignore

    def delete_token_lifetime_policies(
        self,
        token_lifetime_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property tokenLifetimePolicies for policies.

        Delete navigation property tokenLifetimePolicies for policies.

        :param token_lifetime_policy_id: key: id of tokenLifetimePolicy.
        :type token_lifetime_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_token_lifetime_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'tokenLifetimePolicy-id': self._serialize.url("token_lifetime_policy_id", token_lifetime_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_token_lifetime_policies.metadata = {'url': '/policies/tokenLifetimePolicies/{tokenLifetimePolicy-id}'}  # type: ignore
