# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofonlinemeeting(msrest.serialization.Model):
    """Collection of onlineMeeting.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~cloud_communications.models.microsoftgraphonlinemeeting]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphonlinemeeting]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofonlinemeeting, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class microsoftgraphaudioconferencing(msrest.serialization.Model):
    """audioConferencing.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param conference_id:
    :type conference_id: str
    :param dialin_url: A URL to the externally-accessible web page that contains dial-in
     information.
    :type dialin_url: str
    :param toll_free_number: The toll-free number that connects to the Audio Conference Provider.
    :type toll_free_number: str
    :param toll_number: The toll number that connects to the Audio Conference Provider.
    :type toll_number: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'dialin_url': {'key': 'dialinUrl', 'type': 'str'},
        'toll_free_number': {'key': 'tollFreeNumber', 'type': 'str'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphaudioconferencing, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.conference_id = kwargs.get('conference_id', None)
        self.dialin_url = kwargs.get('dialin_url', None)
        self.toll_free_number = kwargs.get('toll_free_number', None)
        self.toll_number = kwargs.get('toll_number', None)


class microsoftgraphchatinfo(msrest.serialization.Model):
    """chatInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param message_id: The unique identifier of a message in a Microsoft Teams channel.
    :type message_id: str
    :param reply_chain_message_id: The ID of the reply message.
    :type reply_chain_message_id: str
    :param thread_id: The unique identifier for a thread in Microsoft Teams.
    :type thread_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'reply_chain_message_id': {'key': 'replyChainMessageId', 'type': 'str'},
        'thread_id': {'key': 'threadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphchatinfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.message_id = kwargs.get('message_id', None)
        self.reply_chain_message_id = kwargs.get('reply_chain_message_id', None)
        self.thread_id = kwargs.get('thread_id', None)


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class microsoftgraphidentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class microsoftgraphidentityset(msrest.serialization.Model):
    """identitySet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application: identity.
    :type application: ~cloud_communications.models.microsoftgraphidentity
    :param device: identity.
    :type device: ~cloud_communications.models.microsoftgraphidentity
    :param user: identity.
    :type user: ~cloud_communications.models.microsoftgraphidentity
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'microsoftgraphidentity'},
        'device': {'key': 'device', 'type': 'microsoftgraphidentity'},
        'user': {'key': 'user', 'type': 'microsoftgraphidentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphidentityset, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class microsoftgraphitembody(msrest.serialization.Model):
    """itemBody.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of the item.
    :type content: str
    :param content_type:  Possible values include: "text", "html".
    :type content_type: str or ~cloud_communications.models.Microsoftgraphbodytype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphitembody, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)


class microsoftgraphmeetingparticipantinfo(msrest.serialization.Model):
    """meetingParticipantInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity: identitySet.
    :type identity: ~cloud_communications.models.microsoftgraphidentityset
    :param upn: User principal name of the participant.
    :type upn: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity': {'key': 'identity', 'type': 'microsoftgraphidentityset'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphmeetingparticipantinfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.identity = kwargs.get('identity', None)
        self.upn = kwargs.get('upn', None)


class microsoftgraphmeetingparticipants(msrest.serialization.Model):
    """meetingParticipants.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attendees:
    :type attendees: list[~cloud_communications.models.microsoftgraphmeetingparticipantinfo]
    :param organizer: meetingParticipantInfo.
    :type organizer: ~cloud_communications.models.microsoftgraphmeetingparticipantinfo
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attendees': {'key': 'attendees', 'type': '[microsoftgraphmeetingparticipantinfo]'},
        'organizer': {'key': 'organizer', 'type': 'microsoftgraphmeetingparticipantinfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphmeetingparticipants, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attendees = kwargs.get('attendees', None)
        self.organizer = kwargs.get('organizer', None)


class microsoftgraphonlinemeeting(microsoftgraphentity):
    """onlineMeeting.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param audio_conferencing: audioConferencing.
    :type audio_conferencing: ~cloud_communications.models.microsoftgraphaudioconferencing
    :param chat_info: chatInfo.
    :type chat_info: ~cloud_communications.models.microsoftgraphchatinfo
    :param creation_date_time: The meeting creation time in UTC. Read-only.
    :type creation_date_time: ~datetime.datetime
    :param end_date_time: The meeting end time in UTC.
    :type end_date_time: ~datetime.datetime
    :param external_id:
    :type external_id: str
    :param join_information: itemBody.
    :type join_information: ~cloud_communications.models.microsoftgraphitembody
    :param join_web_url: The join URL of the online meeting. Read-only.
    :type join_web_url: str
    :param participants: meetingParticipants.
    :type participants: ~cloud_communications.models.microsoftgraphmeetingparticipants
    :param start_date_time: The meeting start time in UTC.
    :type start_date_time: ~datetime.datetime
    :param subject: The subject of the online meeting.
    :type subject: str
    :param video_teleconference_id: The video teleconferencing ID. Read-only.
    :type video_teleconference_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'audio_conferencing': {'key': 'audioConferencing', 'type': 'microsoftgraphaudioconferencing'},
        'chat_info': {'key': 'chatInfo', 'type': 'microsoftgraphchatinfo'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'join_information': {'key': 'joinInformation', 'type': 'microsoftgraphitembody'},
        'join_web_url': {'key': 'joinWebUrl', 'type': 'str'},
        'participants': {'key': 'participants', 'type': 'microsoftgraphmeetingparticipants'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'subject': {'key': 'subject', 'type': 'str'},
        'video_teleconference_id': {'key': 'videoTeleconferenceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphonlinemeeting, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.audio_conferencing = kwargs.get('audio_conferencing', None)
        self.chat_info = kwargs.get('chat_info', None)
        self.creation_date_time = kwargs.get('creation_date_time', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.external_id = kwargs.get('external_id', None)
        self.join_information = kwargs.get('join_information', None)
        self.join_web_url = kwargs.get('join_web_url', None)
        self.participants = kwargs.get('participants', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.subject = kwargs.get('subject', None)
        self.video_teleconference_id = kwargs.get('video_teleconference_id', None)


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~cloud_communications.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~cloud_communications.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
