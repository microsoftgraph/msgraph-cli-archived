# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict
from knack.util import CLIError


class AddAudioConferencing(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.audio_conferencing = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'conference-id':
                d['conference_id'] = v[0]

            elif kl == 'dialin-url':
                d['dialin_url'] = v[0]

            elif kl == 'toll-free-number':
                d['toll_free_number'] = v[0]

            elif kl == 'toll-number':
                d['toll_number'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter audio-conferencing. All possible keys are:'
                    ' conference-id, dialin-url, toll-free-number, toll-number'.format(k)
                )

        return d


class AddChatInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.chat_info = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'message-id':
                d['message_id'] = v[0]

            elif kl == 'reply-chain-message-id':
                d['reply_chain_message_id'] = v[0]

            elif kl == 'thread-id':
                d['thread_id'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter chat-info. All possible keys are: message-id,'
                    ' reply-chain-message-id, thread-id'.format(k)
                )

        return d


class AddJoinInformation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.join_information = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'content':
                d['content'] = v[0]

            elif kl == 'content-type':
                d['content_type'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter join-information. All possible keys are: content,'
                    ' content-type'.format(k)
                )

        return d
