# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class siteslistsitemsOperations(object):
    """siteslistsitemsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~sites.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_analytics(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum112"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum113"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphitemanalytics"
        """Get analytics from sites.

        Get analytics from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum112]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum113]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphitemanalytics, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphitemanalytics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphitemanalytics"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_analytics.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphitemanalytics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_analytics.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/analytics'}  # type: ignore

    def get_ref_analytics(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of analytics from sites.

        Get ref of analytics from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_analytics.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_analytics.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def set_ref_analytics(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property analytics in sites.

        Update the ref of navigation property analytics in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_analytics.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_analytics.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def delete_ref_analytics(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property analytics for sites.

        Delete ref of navigation property analytics for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_analytics.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_analytics.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/analytics/$ref'}  # type: ignore

    def get_drive_item(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum114"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum115"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphdriveitem"
        """Get driveItem from sites.

        Get driveItem from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum114]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum115]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphdriveitem, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphdriveitem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphdriveitem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphdriveitem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive_item.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/driveItem'}  # type: ignore

    def update_drive_item(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        body,  # type: "models.microsoftgraphdriveitem"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property driveItem in sites.

        Update the navigation property driveItem in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphdriveitem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphdriveitem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive_item.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/driveItem'}  # type: ignore

    def delete_drive_item(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property driveItem for sites.

        Delete navigation property driveItem for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive_item.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/driveItem'}  # type: ignore

    def get_fields(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphfieldvalueset"
        """Get fields from sites.

        Get fields from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphfieldvalueset, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphfieldvalueset
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphfieldvalueset"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_fields.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphfieldvalueset', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_fields.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/fields'}  # type: ignore

    def update_fields(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        body,  # type: "models.microsoftgraphfieldvalueset"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property fields in sites.

        Update the navigation property fields in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphfieldvalueset
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_fields.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphfieldvalueset')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_fields.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/fields'}  # type: ignore

    def delete_fields(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property fields for sites.

        Delete navigation property fields for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_fields.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_fields.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/fields'}  # type: ignore

    def get_activities_by_interval96_b0(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.microsoftgraphitemactivitystat"]
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphitemactivitystat, or the result of cls(response)
        :rtype: list[~sites.models.microsoftgraphitemactivitystat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphitemactivitystat"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activities_by_interval96_b0.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphitemactivitystat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activities_by_interval96_b0.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/microsoft.graph.getActivitiesByInterval()'}  # type: ignore

    def get_activities_by_interval53_ee(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        start_date_time,  # type: str
        end_date_time,  # type: str
        interval,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.microsoftgraphitemactivitystat"]
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param start_date_time:
        :type start_date_time: str
        :param end_date_time:
        :type end_date_time: str
        :param interval:
        :type interval: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of microsoftgraphitemactivitystat, or the result of cls(response)
        :rtype: list[~sites.models.microsoftgraphitemactivitystat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.microsoftgraphitemactivitystat"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activities_by_interval53_ee.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'startDateTime': self._serialize.url("start_date_time", start_date_time, 'str'),
            'endDateTime': self._serialize.url("end_date_time", end_date_time, 'str'),
            'interval': self._serialize.url("interval", interval, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[microsoftgraphitemactivitystat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activities_by_interval53_ee.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/microsoft.graph.getActivitiesByInterval(startDateTime=\'{startDateTime}\',endDateTime=\'{endDateTime}\',interval=\'{interval}\')'}  # type: ignore

    def list_versions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum116"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum117"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum118"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoflistitemversion"]
        """Get versions from sites.

        Get versions from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum116]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum117]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum118]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoflistitemversion or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.collectionoflistitemversion]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoflistitemversion"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_versions.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                    'list-id': self._serialize.url("list_id", list_id, 'str'),
                    'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoflistitemversion', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_versions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions'}  # type: ignore

    def create_versions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        body,  # type: "models.microsoftgraphlistitemversion"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphlistitemversion"
        """Create new navigation property to versions for sites.

        Create new navigation property to versions for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property.
        :type body: ~sites.models.microsoftgraphlistitemversion
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphlistitemversion, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphlistitemversion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphlistitemversion"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_versions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphlistitemversion')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphlistitemversion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_versions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions'}  # type: ignore

    def get_versions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum119"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum120"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphlistitemversion"
        """Get versions from sites.

        Get versions from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum119]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum120]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphlistitemversion, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphlistitemversion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphlistitemversion"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_versions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphlistitemversion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_versions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore

    def update_versions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        body,  # type: "models.microsoftgraphlistitemversion"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property versions in sites.

        Update the navigation property versions in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphlistitemversion
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_versions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphlistitemversion')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_versions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore

    def delete_versions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        list_item_version_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property versions for sites.

        Delete navigation property versions for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param list_item_version_id: key: id of listItemVersion.
        :type list_item_version_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_versions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_versions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions/{listItemVersion-id}'}  # type: ignore
