# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class siteslistsOperations(object):
    """siteslistsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~sites.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_columns(
        self,
        site_id,  # type: str
        list_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum94"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum95"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofcolumndefinition0"]
        """Get columns from sites.

        Get columns from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum94]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum95]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofcolumndefinition0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.collectionofcolumndefinition0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofcolumndefinition0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_columns.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                    'list-id': self._serialize.url("list_id", list_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofcolumndefinition0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_columns.metadata = {'url': '/sites/{site-id}/lists/{list-id}/columns'}  # type: ignore

    def create_columns(
        self,
        site_id,  # type: str
        list_id,  # type: str
        body,  # type: "models.microsoftgraphcolumndefinition"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphcolumndefinition"
        """Create new navigation property to columns for sites.

        Create new navigation property to columns for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param body: New navigation property.
        :type body: ~sites.models.microsoftgraphcolumndefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphcolumndefinition, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphcolumndefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphcolumndefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_columns.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphcolumndefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphcolumndefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_columns.metadata = {'url': '/sites/{site-id}/lists/{list-id}/columns'}  # type: ignore

    def get_columns(
        self,
        site_id,  # type: str
        list_id,  # type: str
        column_definition_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum96"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphcolumndefinition"
        """Get columns from sites.

        Get columns from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum96]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphcolumndefinition, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphcolumndefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphcolumndefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_columns.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphcolumndefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_columns.metadata = {'url': '/sites/{site-id}/lists/{list-id}/columns/{columnDefinition-id}'}  # type: ignore

    def update_columns(
        self,
        site_id,  # type: str
        list_id,  # type: str
        column_definition_id,  # type: str
        body,  # type: "models.microsoftgraphcolumndefinition"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property columns in sites.

        Update the navigation property columns in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphcolumndefinition
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_columns.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphcolumndefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_columns.metadata = {'url': '/sites/{site-id}/lists/{list-id}/columns/{columnDefinition-id}'}  # type: ignore

    def delete_columns(
        self,
        site_id,  # type: str
        list_id,  # type: str
        column_definition_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property columns for sites.

        Delete navigation property columns for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_columns.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_columns.metadata = {'url': '/sites/{site-id}/lists/{list-id}/columns/{columnDefinition-id}'}  # type: ignore

    def list_content_types(
        self,
        site_id,  # type: str
        list_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum97"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum98"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum99"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofcontenttype0"]
        """Get contentTypes from sites.

        Get contentTypes from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum97]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum98]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum99]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofcontenttype0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.collectionofcontenttype0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofcontenttype0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_content_types.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                    'list-id': self._serialize.url("list_id", list_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofcontenttype0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_content_types.metadata = {'url': '/sites/{site-id}/lists/{list-id}/contentTypes'}  # type: ignore

    def create_content_types(
        self,
        site_id,  # type: str
        list_id,  # type: str
        body,  # type: "models.microsoftgraphcontenttype"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphcontenttype"
        """Create new navigation property to contentTypes for sites.

        Create new navigation property to contentTypes for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param body: New navigation property.
        :type body: ~sites.models.microsoftgraphcontenttype
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphcontenttype, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphcontenttype
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphcontenttype"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_content_types.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphcontenttype')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphcontenttype', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_content_types.metadata = {'url': '/sites/{site-id}/lists/{list-id}/contentTypes'}  # type: ignore

    def get_content_types(
        self,
        site_id,  # type: str
        list_id,  # type: str
        content_type_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum100"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum101"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphcontenttype"
        """Get contentTypes from sites.

        Get contentTypes from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum100]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum101]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphcontenttype, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphcontenttype
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphcontenttype"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_content_types.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphcontenttype', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_content_types.metadata = {'url': '/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}'}  # type: ignore

    def update_content_types(
        self,
        site_id,  # type: str
        list_id,  # type: str
        content_type_id,  # type: str
        body,  # type: "models.microsoftgraphcontenttype"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property contentTypes in sites.

        Update the navigation property contentTypes in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphcontenttype
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_content_types.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphcontenttype')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_content_types.metadata = {'url': '/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}'}  # type: ignore

    def delete_content_types(
        self,
        site_id,  # type: str
        list_id,  # type: str
        content_type_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property contentTypes for sites.

        Delete navigation property contentTypes for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_content_types.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_content_types.metadata = {'url': '/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}'}  # type: ignore

    def get_drive(
        self,
        site_id,  # type: str
        list_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum105"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum106"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphdrive"
        """Get drive from sites.

        Get drive from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum105]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum106]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphdrive, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphdrive
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphdrive"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphdrive', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive.metadata = {'url': '/sites/{site-id}/lists/{list-id}/drive'}  # type: ignore

    def update_drive(
        self,
        site_id,  # type: str
        list_id,  # type: str
        body,  # type: "models.microsoftgraphdrive"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property drive in sites.

        Update the navigation property drive in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphdrive
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphdrive')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive.metadata = {'url': '/sites/{site-id}/lists/{list-id}/drive'}  # type: ignore

    def delete_drive(
        self,
        site_id,  # type: str
        list_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property drive for sites.

        Delete navigation property drive for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive.metadata = {'url': '/sites/{site-id}/lists/{list-id}/drive'}  # type: ignore

    def list_items(
        self,
        site_id,  # type: str
        list_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum107"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum108"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum109"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoflistitem"]
        """Get items from sites.

        Get items from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum107]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum108]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum109]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoflistitem or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.collectionoflistitem]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoflistitem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_items.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                    'list-id': self._serialize.url("list_id", list_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoflistitem', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_items.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items'}  # type: ignore

    def create_items(
        self,
        site_id,  # type: str
        list_id,  # type: str
        body,  # type: "models.microsoftgraphlistitem"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphlistitem"
        """Create new navigation property to items for sites.

        Create new navigation property to items for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param body: New navigation property.
        :type body: ~sites.models.microsoftgraphlistitem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphlistitem, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphlistitem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphlistitem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_items.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphlistitem')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphlistitem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_items.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items'}  # type: ignore

    def get_items(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum110"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum111"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphlistitem"
        """Get items from sites.

        Get items from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum110]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum111]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphlistitem, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphlistitem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphlistitem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_items.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphlistitem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_items.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}'}  # type: ignore

    def update_items(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        body,  # type: "models.microsoftgraphlistitem"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property items in sites.

        Update the navigation property items in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphlistitem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_items.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphlistitem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_items.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}'}  # type: ignore

    def delete_items(
        self,
        site_id,  # type: str
        list_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property items for sites.

        Delete navigation property items for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_items.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_items.metadata = {'url': '/sites/{site-id}/lists/{list-id}/items/{listItem-id}'}  # type: ignore

    def list_subscriptions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum121"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum122"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofsubscription"]
        """Get subscriptions from sites.

        Get subscriptions from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum121]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum122]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofsubscription or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.collectionofsubscription]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofsubscription"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_subscriptions.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                    'list-id': self._serialize.url("list_id", list_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofsubscription', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_subscriptions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/subscriptions'}  # type: ignore

    def create_subscriptions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        body,  # type: "models.microsoftgraphsubscription"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphsubscription"
        """Create new navigation property to subscriptions for sites.

        Create new navigation property to subscriptions for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param body: New navigation property.
        :type body: ~sites.models.microsoftgraphsubscription
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphsubscription, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphsubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphsubscription"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_subscriptions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphsubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphsubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_subscriptions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/subscriptions'}  # type: ignore

    def get_subscriptions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        subscription_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum123"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphsubscription"
        """Get subscriptions from sites.

        Get subscriptions from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum123]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphsubscription, or the result of cls(response)
        :rtype: ~sites.models.microsoftgraphsubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphsubscription"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_subscriptions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphsubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_subscriptions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/subscriptions/{subscription-id}'}  # type: ignore

    def update_subscriptions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        subscription_id,  # type: str
        body,  # type: "models.microsoftgraphsubscription"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property subscriptions in sites.

        Update the navigation property subscriptions in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param body: New navigation property values.
        :type body: ~sites.models.microsoftgraphsubscription
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_subscriptions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphsubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_subscriptions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/subscriptions/{subscription-id}'}  # type: ignore

    def delete_subscriptions(
        self,
        site_id,  # type: str
        list_id,  # type: str
        subscription_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property subscriptions for sites.

        Delete navigation property subscriptions for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_subscriptions.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_subscriptions.metadata = {'url': '/sites/{site-id}/lists/{list-id}/subscriptions/{subscription-id}'}  # type: ignore
