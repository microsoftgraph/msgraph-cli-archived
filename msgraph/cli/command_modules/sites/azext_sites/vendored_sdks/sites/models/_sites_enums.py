# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum100(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    GROUP = "group"
    HIDDEN = "hidden"
    INHERITEDFROM = "inheritedFrom"
    NAME = "name"
    ORDER = "order"
    PARENTID = "parentId"
    READONLY = "readOnly"
    SEALED = "sealed"
    COLUMNLINKS = "columnLinks"

class Enum101(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    COLUMNLINKS = "columnLinks"

class Enum102(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    NAME = "name"
    NAMEDESC = "name desc"

class Enum103(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum104(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum105(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DRIVETYPE = "driveType"
    OWNER = "owner"
    QUOTA = "quota"
    SHAREPOINTIDS = "sharePointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum106(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum107(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    CONTENTTYPE = "contentType"
    CONTENTTYPEDESC = "contentType desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"

class Enum108(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    CONTENTTYPE = "contentType"
    SHAREPOINTIDS = "sharepointIds"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    DRIVEITEM = "driveItem"
    FIELDS = "fields"
    VERSIONS = "versions"

class Enum109(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    DRIVEITEM = "driveItem"
    FIELDS = "fields"
    VERSIONS = "versions"

class Enum110(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    CONTENTTYPE = "contentType"
    SHAREPOINTIDS = "sharepointIds"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    DRIVEITEM = "driveItem"
    FIELDS = "fields"
    VERSIONS = "versions"

class Enum111(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    DRIVEITEM = "driveItem"
    FIELDS = "fields"
    VERSIONS = "versions"

class Enum112(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLTIME = "allTime"
    ITEMACTIVITYSTATS = "itemActivityStats"
    LASTSEVENDAYS = "lastSevenDays"

class Enum113(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ALLTIME = "allTime"
    ITEMACTIVITYSTATS = "itemActivityStats"
    LASTSEVENDAYS = "lastSevenDays"

class Enum114(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    AUDIO = "audio"
    CONTENT = "content"
    CTAG = "cTag"
    DELETED = "deleted"
    FILE = "file"
    FILESYSTEMINFO = "fileSystemInfo"
    FOLDER = "folder"
    IMAGE = "image"
    LOCATION = "location"
    PACKAGE = "package"
    PENDINGOPERATIONS = "pendingOperations"
    PHOTO = "photo"
    PUBLICATION = "publication"
    REMOTEITEM = "remoteItem"
    ROOT = "root"
    SEARCHRESULT = "searchResult"
    SHARED = "shared"
    SHAREPOINTIDS = "sharepointIds"
    SIZE = "size"
    SPECIALFOLDER = "specialFolder"
    VIDEO = "video"
    WEBDAVURL = "webDavUrl"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LISTITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum115(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LISTITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum116(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    PUBLICATION = "publication"
    PUBLICATIONDESC = "publication desc"

class Enum117(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    PUBLICATION = "publication"
    FIELDS = "fields"

class Enum118(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FIELDS = "fields"

class Enum119(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    PUBLICATION = "publication"
    FIELDS = "fields"

class Enum120(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FIELDS = "fields"

class Enum121(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    APPLICATIONID = "applicationId"
    APPLICATIONIDDESC = "applicationId desc"
    CHANGETYPE = "changeType"
    CHANGETYPEDESC = "changeType desc"
    CLIENTSTATE = "clientState"
    CLIENTSTATEDESC = "clientState desc"
    CREATORID = "creatorId"
    CREATORIDDESC = "creatorId desc"
    ENCRYPTIONCERTIFICATE = "encryptionCertificate"
    ENCRYPTIONCERTIFICATEDESC = "encryptionCertificate desc"
    ENCRYPTIONCERTIFICATEID = "encryptionCertificateId"
    ENCRYPTIONCERTIFICATEIDDESC = "encryptionCertificateId desc"
    EXPIRATIONDATETIME = "expirationDateTime"
    EXPIRATIONDATETIMEDESC = "expirationDateTime desc"
    INCLUDERESOURCEDATA = "includeResourceData"
    INCLUDERESOURCEDATADESC = "includeResourceData desc"
    LATESTSUPPORTEDTLSVERSION = "latestSupportedTlsVersion"
    LATESTSUPPORTEDTLSVERSIONDESC = "latestSupportedTlsVersion desc"
    LIFECYCLENOTIFICATIONURL = "lifecycleNotificationUrl"
    LIFECYCLENOTIFICATIONURLDESC = "lifecycleNotificationUrl desc"
    NOTIFICATIONURL = "notificationUrl"
    NOTIFICATIONURLDESC = "notificationUrl desc"
    RESOURCE = "resource"
    RESOURCEDESC = "resource desc"

class Enum122(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATIONID = "applicationId"
    CHANGETYPE = "changeType"
    CLIENTSTATE = "clientState"
    CREATORID = "creatorId"
    ENCRYPTIONCERTIFICATE = "encryptionCertificate"
    ENCRYPTIONCERTIFICATEID = "encryptionCertificateId"
    EXPIRATIONDATETIME = "expirationDateTime"
    INCLUDERESOURCEDATA = "includeResourceData"
    LATESTSUPPORTEDTLSVERSION = "latestSupportedTlsVersion"
    LIFECYCLENOTIFICATIONURL = "lifecycleNotificationUrl"
    NOTIFICATIONURL = "notificationUrl"
    RESOURCE = "resource"

class Enum123(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATIONID = "applicationId"
    CHANGETYPE = "changeType"
    CLIENTSTATE = "clientState"
    CREATORID = "creatorId"
    ENCRYPTIONCERTIFICATE = "encryptionCertificate"
    ENCRYPTIONCERTIFICATEID = "encryptionCertificateId"
    EXPIRATIONDATETIME = "expirationDateTime"
    INCLUDERESOURCEDATA = "includeResourceData"
    LATESTSUPPORTEDTLSVERSION = "latestSupportedTlsVersion"
    LIFECYCLENOTIFICATIONURL = "lifecycleNotificationUrl"
    NOTIFICATIONURL = "notificationUrl"
    RESOURCE = "resource"

class Enum127(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ERROR = "error"
    ERRORDESC = "error desc"
    ROOT = "root"
    ROOTDESC = "root desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SITECOLLECTION = "siteCollection"
    SITECOLLECTIONDESC = "siteCollection desc"

class Enum128(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum129(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum130(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum131(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum132(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ERROR = "error"
    ERRORDESC = "error desc"
    ROOT = "root"
    ROOTDESC = "root desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SITECOLLECTION = "siteCollection"
    SITECOLLECTIONDESC = "siteCollection desc"

class Enum133(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum134(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum135(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ERROR = "error"
    ERRORDESC = "error desc"
    ROOT = "root"
    ROOTDESC = "root desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SITECOLLECTION = "siteCollection"
    SITECOLLECTIONDESC = "siteCollection desc"

class Enum65(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum66(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Enum69(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALLTIME = "allTime"
    ITEMACTIVITYSTATS = "itemActivityStats"
    LASTSEVENDAYS = "lastSevenDays"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ALLTIME = "allTime"
    ITEMACTIVITYSTATS = "itemActivityStats"
    LASTSEVENDAYS = "lastSevenDays"

class Enum71(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    BOOLEAN = "boolean"
    BOOLEANDESC = "boolean desc"
    CALCULATED = "calculated"
    CALCULATEDDESC = "calculated desc"
    CHOICE = "choice"
    CHOICEDESC = "choice desc"
    COLUMNGROUP = "columnGroup"
    COLUMNGROUPDESC = "columnGroup desc"
    CURRENCY = "currency"
    CURRENCYDESC = "currency desc"
    DATETIME = "dateTime"
    DATETIMEDESC = "dateTime desc"
    DEFAULTVALUE = "defaultValue"
    DEFAULTVALUEDESC = "defaultValue desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    ENFORCEUNIQUEVALUESDESC = "enforceUniqueValues desc"
    GEOLOCATION = "geolocation"
    GEOLOCATIONDESC = "geolocation desc"
    HIDDEN = "hidden"
    HIDDENDESC = "hidden desc"
    INDEXED = "indexed"
    INDEXEDDESC = "indexed desc"
    LOOKUP = "lookup"
    LOOKUPDESC = "lookup desc"
    NAME = "name"
    NAMEDESC = "name desc"
    NUMBER = "number"
    NUMBERDESC = "number desc"
    PERSONORGROUP = "personOrGroup"
    PERSONORGROUPDESC = "personOrGroup desc"
    READONLY = "readOnly"
    READONLYDESC = "readOnly desc"
    REQUIRED = "required"
    REQUIREDDESC = "required desc"
    TEXT = "text"
    TEXTDESC = "text desc"

class Enum72(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    BOOLEAN = "boolean"
    CALCULATED = "calculated"
    CHOICE = "choice"
    COLUMNGROUP = "columnGroup"
    CURRENCY = "currency"
    DATETIME = "dateTime"
    DEFAULTVALUE = "defaultValue"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    GEOLOCATION = "geolocation"
    HIDDEN = "hidden"
    INDEXED = "indexed"
    LOOKUP = "lookup"
    NAME = "name"
    NUMBER = "number"
    PERSONORGROUP = "personOrGroup"
    READONLY = "readOnly"
    REQUIRED = "required"
    TEXT = "text"

class Enum73(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    BOOLEAN = "boolean"
    CALCULATED = "calculated"
    CHOICE = "choice"
    COLUMNGROUP = "columnGroup"
    CURRENCY = "currency"
    DATETIME = "dateTime"
    DEFAULTVALUE = "defaultValue"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    GEOLOCATION = "geolocation"
    HIDDEN = "hidden"
    INDEXED = "indexed"
    LOOKUP = "lookup"
    NAME = "name"
    NUMBER = "number"
    PERSONORGROUP = "personOrGroup"
    READONLY = "readOnly"
    REQUIRED = "required"
    TEXT = "text"

class Enum74(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    GROUP = "group"
    GROUPDESC = "group desc"
    HIDDEN = "hidden"
    HIDDENDESC = "hidden desc"
    INHERITEDFROM = "inheritedFrom"
    INHERITEDFROMDESC = "inheritedFrom desc"
    NAME = "name"
    NAMEDESC = "name desc"
    ORDER = "order"
    ORDERDESC = "order desc"
    PARENTID = "parentId"
    PARENTIDDESC = "parentId desc"
    READONLY = "readOnly"
    READONLYDESC = "readOnly desc"
    SEALED = "sealed"
    SEALEDDESC = "sealed desc"

class Enum75(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    GROUP = "group"
    HIDDEN = "hidden"
    INHERITEDFROM = "inheritedFrom"
    NAME = "name"
    ORDER = "order"
    PARENTID = "parentId"
    READONLY = "readOnly"
    SEALED = "sealed"
    COLUMNLINKS = "columnLinks"

class Enum76(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    COLUMNLINKS = "columnLinks"

class Enum77(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    GROUP = "group"
    HIDDEN = "hidden"
    INHERITEDFROM = "inheritedFrom"
    NAME = "name"
    ORDER = "order"
    PARENTID = "parentId"
    READONLY = "readOnly"
    SEALED = "sealed"
    COLUMNLINKS = "columnLinks"

class Enum78(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    COLUMNLINKS = "columnLinks"

class Enum79(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    NAME = "name"
    NAMEDESC = "name desc"

class Enum80(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum81(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAME = "name"

class Enum82(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DRIVETYPE = "driveType"
    OWNER = "owner"
    QUOTA = "quota"
    SHAREPOINTIDS = "sharePointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum83(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum84(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DRIVETYPE = "driveType"
    DRIVETYPEDESC = "driveType desc"
    OWNER = "owner"
    OWNERDESC = "owner desc"
    QUOTA = "quota"
    QUOTADESC = "quota desc"
    SHAREPOINTIDS = "sharePointIds"
    SHAREPOINTIDSDESC = "sharePointIds desc"
    SYSTEM = "system"
    SYSTEMDESC = "system desc"

class Enum85(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DRIVETYPE = "driveType"
    OWNER = "owner"
    QUOTA = "quota"
    SHAREPOINTIDS = "sharePointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum86(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum87(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DRIVETYPE = "driveType"
    OWNER = "owner"
    QUOTA = "quota"
    SHAREPOINTIDS = "sharePointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum88(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    FOLLOWING = "following"
    ITEMS = "items"
    LIST = "list"
    ROOT = "root"
    SPECIAL = "special"

class Enum89(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    LIST = "list"
    LISTDESC = "list desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SYSTEM = "system"
    SYSTEMDESC = "system desc"

class Enum90(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    LIST = "list"
    SHAREPOINTIDS = "sharepointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    ITEMS = "items"
    SUBSCRIPTIONS = "subscriptions"

class Enum91(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    ITEMS = "items"
    SUBSCRIPTIONS = "subscriptions"

class Enum92(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    LIST = "list"
    SHAREPOINTIDS = "sharepointIds"
    SYSTEM = "system"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    ITEMS = "items"
    SUBSCRIPTIONS = "subscriptions"

class Enum93(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    ITEMS = "items"
    SUBSCRIPTIONS = "subscriptions"

class Enum94(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    BOOLEAN = "boolean"
    BOOLEANDESC = "boolean desc"
    CALCULATED = "calculated"
    CALCULATEDDESC = "calculated desc"
    CHOICE = "choice"
    CHOICEDESC = "choice desc"
    COLUMNGROUP = "columnGroup"
    COLUMNGROUPDESC = "columnGroup desc"
    CURRENCY = "currency"
    CURRENCYDESC = "currency desc"
    DATETIME = "dateTime"
    DATETIMEDESC = "dateTime desc"
    DEFAULTVALUE = "defaultValue"
    DEFAULTVALUEDESC = "defaultValue desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    ENFORCEUNIQUEVALUESDESC = "enforceUniqueValues desc"
    GEOLOCATION = "geolocation"
    GEOLOCATIONDESC = "geolocation desc"
    HIDDEN = "hidden"
    HIDDENDESC = "hidden desc"
    INDEXED = "indexed"
    INDEXEDDESC = "indexed desc"
    LOOKUP = "lookup"
    LOOKUPDESC = "lookup desc"
    NAME = "name"
    NAMEDESC = "name desc"
    NUMBER = "number"
    NUMBERDESC = "number desc"
    PERSONORGROUP = "personOrGroup"
    PERSONORGROUPDESC = "personOrGroup desc"
    READONLY = "readOnly"
    READONLYDESC = "readOnly desc"
    REQUIRED = "required"
    REQUIREDDESC = "required desc"
    TEXT = "text"
    TEXTDESC = "text desc"

class Enum95(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    BOOLEAN = "boolean"
    CALCULATED = "calculated"
    CHOICE = "choice"
    COLUMNGROUP = "columnGroup"
    CURRENCY = "currency"
    DATETIME = "dateTime"
    DEFAULTVALUE = "defaultValue"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    GEOLOCATION = "geolocation"
    HIDDEN = "hidden"
    INDEXED = "indexed"
    LOOKUP = "lookup"
    NAME = "name"
    NUMBER = "number"
    PERSONORGROUP = "personOrGroup"
    READONLY = "readOnly"
    REQUIRED = "required"
    TEXT = "text"

class Enum96(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    BOOLEAN = "boolean"
    CALCULATED = "calculated"
    CHOICE = "choice"
    COLUMNGROUP = "columnGroup"
    CURRENCY = "currency"
    DATETIME = "dateTime"
    DEFAULTVALUE = "defaultValue"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    ENFORCEUNIQUEVALUES = "enforceUniqueValues"
    GEOLOCATION = "geolocation"
    HIDDEN = "hidden"
    INDEXED = "indexed"
    LOOKUP = "lookup"
    NAME = "name"
    NUMBER = "number"
    PERSONORGROUP = "personOrGroup"
    READONLY = "readOnly"
    REQUIRED = "required"
    TEXT = "text"

class Enum97(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    GROUP = "group"
    GROUPDESC = "group desc"
    HIDDEN = "hidden"
    HIDDENDESC = "hidden desc"
    INHERITEDFROM = "inheritedFrom"
    INHERITEDFROMDESC = "inheritedFrom desc"
    NAME = "name"
    NAMEDESC = "name desc"
    ORDER = "order"
    ORDERDESC = "order desc"
    PARENTID = "parentId"
    PARENTIDDESC = "parentId desc"
    READONLY = "readOnly"
    READONLYDESC = "readOnly desc"
    SEALED = "sealed"
    SEALEDDESC = "sealed desc"

class Enum98(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    GROUP = "group"
    HIDDEN = "hidden"
    INHERITEDFROM = "inheritedFrom"
    NAME = "name"
    ORDER = "order"
    PARENTID = "parentId"
    READONLY = "readOnly"
    SEALED = "sealed"
    COLUMNLINKS = "columnLinks"

class Enum99(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    COLUMNLINKS = "columnLinks"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Get2itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Get3itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ERROR = "error"
    ERRORDESC = "error desc"
    ROOT = "root"
    ROOTDESC = "root desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SITECOLLECTION = "siteCollection"
    SITECOLLECTIONDESC = "siteCollection desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    ETAG = "eTag"
    ETAGDESC = "eTag desc"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDBYDESC = "lastModifiedBy desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    NAME = "name"
    NAMEDESC = "name desc"
    PARENTREFERENCE = "parentReference"
    PARENTREFERENCEDESC = "parentReference desc"
    WEBURL = "webUrl"
    WEBURLDESC = "webUrl desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    ERROR = "error"
    ERRORDESC = "error desc"
    ROOT = "root"
    ROOTDESC = "root desc"
    SHAREPOINTIDS = "sharepointIds"
    SHAREPOINTIDSDESC = "sharepointIds desc"
    SITECOLLECTION = "siteCollection"
    SITECOLLECTIONDESC = "siteCollection desc"

class Get7itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATEDBY = "createdBy"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    ETAG = "eTag"
    LASTMODIFIEDBY = "lastModifiedBy"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    NAME = "name"
    PARENTREFERENCE = "parentReference"
    WEBURL = "webUrl"
    DISPLAYNAME = "displayName"
    ERROR = "error"
    ROOT = "root"
    SHAREPOINTIDS = "sharepointIds"
    SITECOLLECTION = "siteCollection"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Get8itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATEDBYUSER = "createdByUser"
    LASTMODIFIEDBYUSER = "lastModifiedByUser"
    ANALYTICS = "analytics"
    COLUMNS = "columns"
    CONTENTTYPES = "contentTypes"
    DRIVE = "drive"
    DRIVES = "drives"
    ITEMS = "items"
    LISTS = "lists"
    SITES = "sites"
    ONENOTE = "onenote"

class Microsoftgraphactionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOTSUPPORTED = "notSupported"

class Microsoftgraphattendeetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class Microsoftgraphautomaticrepliesstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYSENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class Microsoftgraphbodytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class Microsoftgraphcalendarcolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHTBLUE = "lightBlue"
    LIGHTGREEN = "lightGreen"
    AUTO = "auto"
    LIGHTORANGE = "lightOrange"
    LIGHTGRAY = "lightGray"
    LIGHTYELLOW = "lightYellow"
    LIGHTTEAL = "lightTeal"
    LIGHTPINK = "lightPink"
    LIGHTBROWN = "lightBrown"
    LIGHTRED = "lightRed"
    MAXCOLOR = "maxColor"

class Microsoftgraphcalendarroletype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREEBUSYREAD = "freeBusyRead"
    LIMITEDREAD = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATEWITHOUTPRIVATEEVENTACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATEWITHPRIVATEEVENTACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class Microsoftgraphcategorycolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class Microsoftgraphchannelmembershiptype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphchatmessageimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphchatmessagepolicyviolationdlpactiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFYSENDER = "notifySender"
    BLOCKACCESS = "blockAccess"
    BLOCKACCESSEXTERNAL = "blockAccessExternal"

class Microsoftgraphchatmessagepolicyviolationuseractiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORTFALSEPOSITIVE = "reportFalsePositive"

class Microsoftgraphchatmessagepolicyviolationverdictdetailstypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOWFALSEPOSITIVEOVERRIDE = "allowFalsePositiveOverride"
    ALLOWOVERRIDEWITHOUTJUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOWOVERRIDEWITHJUSTIFICATION = "allowOverrideWithJustification"

class Microsoftgraphchatmessagetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHATEVENT = "chatEvent"
    TYPING = "typing"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcompliancestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    INGRACEPERIOD = "inGracePeriod"
    CONFIGMANAGER = "configManager"

class Microsoftgraphcompliancestatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOTAPPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NONCOMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOTASSIGNED = "notAssigned"

class Microsoftgraphdayofweek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class Microsoftgraphdelegatemeetingmessagedeliveryoptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDTODELEGATEANDINFORMATIONTOPRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SENDTODELEGATEANDPRINCIPAL = "sendToDelegateAndPrincipal"
    SENDTODELEGATEONLY = "sendToDelegateOnly"

class Microsoftgraphdeviceenrollmenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USERENROLLMENT = "userEnrollment"
    DEVICEENROLLMENTMANAGER = "deviceEnrollmentManager"
    APPLEBULKWITHUSER = "appleBulkWithUser"
    APPLEBULKWITHOUTUSER = "appleBulkWithoutUser"
    WINDOWSAZUREADJOIN = "windowsAzureADJoin"
    WINDOWSBULKUSERLESS = "windowsBulkUserless"
    WINDOWSAUTOENROLLMENT = "windowsAutoEnrollment"
    WINDOWSBULKAZUREDOMAINJOIN = "windowsBulkAzureDomainJoin"
    WINDOWSCOMANAGEMENT = "windowsCoManagement"

class Microsoftgraphdevicemanagementexchangeaccessstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class Microsoftgraphdevicemanagementexchangeaccessstatereason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGEGLOBALRULE = "exchangeGlobalRule"
    EXCHANGEINDIVIDUALRULE = "exchangeIndividualRule"
    EXCHANGEDEVICERULE = "exchangeDeviceRule"
    EXCHANGEUPGRADE = "exchangeUpgrade"
    EXCHANGEMAILBOXPOLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOTCOMPLIANT = "notCompliant"
    NOTENROLLED = "notEnrolled"
    UNKNOWNLOCATION = "unknownLocation"
    MFAREQUIRED = "mfaRequired"
    AZUREADBLOCKDUETOACCESSPOLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISEDPASSWORD = "compromisedPassword"
    DEVICENOTKNOWNWITHMANAGEDAPP = "deviceNotKnownWithManagedApp"

class Microsoftgraphdeviceregistrationstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTREGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEYCONFLICT = "keyConflict"
    APPROVALPENDING = "approvalPending"
    CERTIFICATERESET = "certificateReset"
    NOTREGISTEREDPENDINGENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class Microsoftgrapheventtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLEINSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIESMASTER = "seriesMaster"

class Microsoftgraphexternalaudiencescope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTSONLY = "contactsOnly"
    ALL = "all"

class Microsoftgraphfollowupflagstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTFLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class Microsoftgraphfreebusystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKINGELSEWHERE = "workingElsewhere"

class Microsoftgraphgiphyratingtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class Microsoftgraphinferenceclassificationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class Microsoftgraphlocationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCEROOM = "conferenceRoom"
    HOMEADDRESS = "homeAddress"
    BUSINESSADDRESS = "businessAddress"
    GEOCOORDINATES = "geoCoordinates"
    STREETADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCALBUSINESS = "localBusiness"
    POSTALADDRESS = "postalAddress"

class Microsoftgraphlocationuniqueidtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATIONSTORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class Microsoftgraphmanagedappflaggedreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTEDDEVICE = "rootedDevice"

class Microsoftgraphmanageddeviceownertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class Microsoftgraphmanageddevicepartnerreportedhealthstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOWSEVERITY = "lowSeverity"
    MEDIUMSEVERITY = "mediumSeverity"
    HIGHSEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class Microsoftgraphmanagementagenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EASMDM = "easMdm"
    INTUNECLIENT = "intuneClient"
    EASINTUNECLIENT = "easIntuneClient"
    CONFIGURATIONMANAGERCLIENT = "configurationManagerClient"
    CONFIGURATIONMANAGERCLIENTMDM = "configurationManagerClientMdm"
    CONFIGURATIONMANAGERCLIENTMDMEAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLECLOUDDEVICEPOLICYCONTROLLER = "googleCloudDevicePolicyController"

class Microsoftgraphmessageactionflag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DONOTFORWARD = "doNotForward"
    FOLLOWUP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NORESPONSENECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLYTOALL = "replyToAll"
    REVIEW = "review"

class Microsoftgraphonenotepatchactiontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REPLACE = "Replace"
    APPEND = "Append"
    DELETE = "Delete"
    INSERT = "Insert"
    PREPEND = "Prepend"

class Microsoftgraphonenotepatchinsertposition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AFTER = "After"
    BEFORE = "Before"

class Microsoftgraphonenotesourceservice(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    ONEDRIVE = "OneDrive"
    ONEDRIVEFORBUSINESS = "OneDriveForBusiness"
    ONPREMONEDRIVEFORBUSINESS = "OnPremOneDriveForBusiness"

class Microsoftgraphonenoteuserrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class Microsoftgraphonlinemeetingprovidertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPEFORBUSINESS = "skypeForBusiness"
    SKYPEFORCONSUMER = "skypeForConsumer"
    TEAMSFORBUSINESS = "teamsForBusiness"

class Microsoftgraphoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class Microsoftgraphphonetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOMEFAX = "homeFax"
    BUSINESSFAX = "businessFax"
    OTHERFAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class Microsoftgraphplannerpreviewtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NOPREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class Microsoftgraphpolicyplatformtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    IOS = "iOS"
    MACOS = "macOS"
    WINDOWSPHONE81 = "windowsPhone81"
    WINDOWS81ANDLATER = "windows81AndLater"
    WINDOWS10ANDLATER = "windows10AndLater"
    ANDROIDWORKPROFILE = "androidWorkProfile"
    ALL = "all"

class Microsoftgraphrecurrencepatterntype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTEMONTHLY = "absoluteMonthly"
    RELATIVEMONTHLY = "relativeMonthly"
    ABSOLUTEYEARLY = "absoluteYearly"
    RELATIVEYEARLY = "relativeYearly"

class Microsoftgraphrecurrencerangetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENDDATE = "endDate"
    NOEND = "noEnd"
    NUMBERED = "numbered"

class Microsoftgraphresponsetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELYACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOTRESPONDED = "notResponded"

class Microsoftgraphschedulechangerequestactor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphschedulechangestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphscheduleentitytheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARKBLUE = "darkBlue"
    DARKGREEN = "darkGreen"
    DARKPURPLE = "darkPurple"
    DARKPINK = "darkPink"
    DARKYELLOW = "darkYellow"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphselectionlikelihoodinfo(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSPECIFIED = "notSpecified"
    HIGH = "high"

class Microsoftgraphsensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class Microsoftgraphstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsappdistributionmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOTSTARTED = "notStarted"
    INPROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONETEAM = "cloneTeam"
    ARCHIVETEAM = "archiveTeam"
    UNARCHIVETEAM = "unarchiveTeam"
    CREATETEAM = "createTeam"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamspecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATIONSTANDARD = "educationStandard"
    EDUCATIONCLASS = "educationClass"
    EDUCATIONPROFESSIONALLEARNINGCOMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATIONSTAFF = "educationStaff"
    HEALTHCARESTANDARD = "healthcareStandard"
    HEALTHCARECARECOORDINATION = "healthcareCareCoordination"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamvisibilitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDENMEMBERSHIP = "hiddenMembership"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphtimeoffreasonicontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRSTAID = "firstAid"
    DOCTOR = "doctor"
    NOTWORKING = "notWorking"
    CLOCK = "clock"
    JURYDUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGYBANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFICCONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphwebsitetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class Microsoftgraphweekindex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class Microsoftgraphworkbookoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
