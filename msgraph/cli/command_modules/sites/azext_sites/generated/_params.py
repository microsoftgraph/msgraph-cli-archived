# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import get_three_state_flag
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_sites.action import (
    AddSharepointIds,
    AddApplication,
    AddResources,
    AddDetails,
    AddInnerError,
    AddCalculated,
    AddChoice,
    AddDateTime,
    AddDefaultValue,
    AddLookup,
    AddNumber,
    AddPersonOrGroup,
    AddText,
    AddOrder,
    AddColumnLinks,
    AddStoragePlanInformation,
    AddList,
    AddSubscriptions,
    AddContentType,
    AddVersions,
    AddPublication,
    AddSitesOnenoteNotebooksSectiongroupsSectionsPagesCommands,
    AddSitesOnenoteNotebooksSectionsPagesCommands,
    AddSitesOnenotePagesCommands,
    AddSitesOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands,
    AddSitesOnenotePagesParentnotebookSectionsPagesCommands,
    AddSitesOnenotePagesParentsectionPagesCommands,
    AddSitesOnenoteSectiongroupsParentnotebookSectionsPagesCommands,
    AddSitesOnenoteSectiongroupsSectionsPagesCommands,
    AddCommands
)


def load_arguments(self, _):

    with self.argument_context('sites group create-site') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites group delete-site') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites group list-site') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites group show-site') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites group update-site') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites sitessite create-site') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites sitessite delete-site') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites sitessite list-site') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites sitessite show-site') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites sitessite update-site') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites site list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('path', type=str, help='')

    with self.argument_context('sites site create') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites site update') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('site_id1', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The full title for the site. Read-only.')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of column definitions reusable across '
                   'lists under this site. Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types defined for this '
                   'site. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The collection of drives (document libraries) under '
                   'this site. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='Used to address any item contained in this site. This '
                   'collection cannot be enumerated. Expected value: json-string/json-file/@json-file.')
        c.argument('lists', type=validate_file_or_dict, help='The collection of lists under this site. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The collection of the sub-sites under this site. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('data_location_code', type=str, help='The geographic region code for where this site collection '
                   'resides. Read-only.', arg_group='Site Collection')
        c.argument('hostname', type=str, help='The hostname for the site collection. Read-only.', arg_group='Site '
                   'Collection')
        c.argument('microsoft_graph_root', type=validate_file_or_dict, help='root Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Site Collection')
        c.argument('code', type=str, help='', arg_group='Error')
        c.argument('details', action=AddDetails, nargs='+', help='', arg_group='Error')
        c.argument('inner_error', action=AddInnerError, nargs='+', help='publicInnerError', arg_group='Error')
        c.argument('message', type=str, help='', arg_group='Error')
        c.argument('target', type=str, help='', arg_group='Error')

    with self.argument_context('sites site add') as c:
        c.argument('value', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file.')

    with self.argument_context('sites site create-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('boolean', type=validate_file_or_dict, help='booleanColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calculated', action=AddCalculated, nargs='+', help='calculatedColumn')
        c.argument('choice', action=AddChoice, nargs='+', help='choiceColumn')
        c.argument('column_group', type=str, help='For site columns, the name of the group this column belongs to. '
                   'Helps organize related columns.')
        c.argument('date_time', action=AddDateTime, nargs='+', help='dateTimeColumn')
        c.argument('default_value', action=AddDefaultValue, nargs='+', help='defaultColumnValue')
        c.argument('description', type=str, help='The user-facing description of the column.')
        c.argument('display_name', type=str, help='The user-facing name of the column.')
        c.argument('enforce_unique_values', arg_type=get_three_state_flag(), help='If true, no two list items may have '
                   'the same value for this column.')
        c.argument('geolocation', type=validate_file_or_dict, help='geolocationColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Specifies whether the column is displayed in the '
                   'user interface.')
        c.argument('indexed', arg_type=get_three_state_flag(), help='Specifies whether the column values can used for '
                   'sorting and searching.')
        c.argument('lookup', action=AddLookup, nargs='+', help='lookupColumn')
        c.argument('name', type=str, help='The API-facing name of the column as it appears in the [fields][] on a '
                   '[listItem][]. For the user-facing name, see displayName.')
        c.argument('number', action=AddNumber, nargs='+', help='numberColumn')
        c.argument('person_or_group', action=AddPersonOrGroup, nargs='+', help='personOrGroupColumn')
        c.argument('read_only', arg_type=get_three_state_flag(), help='Specifies whether the column values can be '
                   'modified.')
        c.argument('required', arg_type=get_three_state_flag(), help='Specifies whether the column value is not '
                   'optional.')
        c.argument('text', action=AddText, nargs='+', help='textColumn')
        c.argument('locale', type=str, help='Specifies the locale from which to infer the currency symbol.',
                   arg_group='Currency')

    with self.argument_context('sites site create-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='The descriptive text for the item.')
        c.argument('group', type=str, help='The name of the group this content type belongs to. Helps organize related '
                   'content types.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Indicates whether the content type is hidden in '
                   'the list\'s \'New\' menu.')
        c.argument('name', type=str, help='The name of the content type.')
        c.argument('order', action=AddOrder, nargs='+', help='contentTypeOrder')
        c.argument('parent_id', type=str, help='The unique identifier of the content type.')
        c.argument('read_only', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified '
                   'unless this value is first set to false.')
        c.argument('sealed', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified by '
                   'users or through push-down operations. Only site collection administrators can seal or unseal '
                   'content types.')
        c.argument('column_links', action=AddColumnLinks, nargs='+', help='The collection of columns that are required '
                   'by this content type')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Inherited From')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Inherited From')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Inherited '
                   'From')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Inherited From')

    with self.argument_context('sites site create-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_drive_type', type=str, help='Describes the type of drive represented by this '
                   'resource. OneDrive personal drives will return personal. OneDrive for Business will return '
                   'business. SharePoint document libraries will return documentLibrary. Read-only.')
        c.argument('share_point_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('system', type=validate_file_or_dict, help='systemFacet Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('following', type=validate_file_or_dict, help='The list of items the user is following. Only in '
                   'OneDrive for Business. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='All items contained in the drive. Read-only. Nullable. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('list', type=validate_file_or_dict, help='list Expected value: json-string/json-file/@json-file.')
        c.argument('root', type=validate_file_or_dict, help='driveItem Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('special', type=validate_file_or_dict, help='Collection of common folders available in OneDrive. '
                   'Read-only. Nullable. Expected value: json-string/json-file/@json-file.')
        c.argument('deleted', type=int, help='Total space consumed by files in the recycle bin, in bytes. Read-only.',
                   arg_group='Quota')
        c.argument('remaining', type=int, help='Total space remaining before reaching the quota limit, in bytes. '
                   'Read-only.', arg_group='Quota')
        c.argument('state', type=str, help='Enumeration value that indicates the state of the storage space. '
                   'Read-only.', arg_group='Quota')
        c.argument('storage_plan_information', action=AddStoragePlanInformation, nargs='+',
                   help='storagePlanInformation', arg_group='Quota')
        c.argument('total', type=int, help='Total allowed storage space, in bytes. Read-only.', arg_group='Quota')
        c.argument('used', type=int, help='Total space used, in bytes. Read-only.', arg_group='Quota')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')

    with self.argument_context('sites site create-list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The displayable title of the list.')
        c.argument('list', action=AddList, nargs='+', help='listInfo')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('system', type=validate_file_or_dict, help='systemFacet Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of field definitions for this list. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types present in this '
                   'list. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='All items contained in the list. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('subscriptions', action=AddSubscriptions, nargs='+', help='The set of subscriptions on the list.')

    with self.argument_context('sites site delete-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site delete-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site delete-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('drive_id', type=str, help='key: id of drive')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site delete-list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site delete-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site delete-site') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('site_id1', type=str, help='key: id of site')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites site list-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site list-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site list-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site list-list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site remove') as c:
        c.argument('value', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file.')

    with self.argument_context('sites site set-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('sites site show-activity') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('start_date_time', type=str, help='')
        c.argument('end_date_time', type=str, help='')
        c.argument('interval', type=str, help='')

    with self.argument_context('sites site show-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('drive_id', type=str, help='key: id of drive')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show-list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site show-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')

    with self.argument_context('sites site show-site') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('site_id1', type=str, help='key: id of site')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites site update-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('boolean', type=validate_file_or_dict, help='booleanColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calculated', action=AddCalculated, nargs='+', help='calculatedColumn')
        c.argument('choice', action=AddChoice, nargs='+', help='choiceColumn')
        c.argument('column_group', type=str, help='For site columns, the name of the group this column belongs to. '
                   'Helps organize related columns.')
        c.argument('date_time', action=AddDateTime, nargs='+', help='dateTimeColumn')
        c.argument('default_value', action=AddDefaultValue, nargs='+', help='defaultColumnValue')
        c.argument('description', type=str, help='The user-facing description of the column.')
        c.argument('display_name', type=str, help='The user-facing name of the column.')
        c.argument('enforce_unique_values', arg_type=get_three_state_flag(), help='If true, no two list items may have '
                   'the same value for this column.')
        c.argument('geolocation', type=validate_file_or_dict, help='geolocationColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Specifies whether the column is displayed in the '
                   'user interface.')
        c.argument('indexed', arg_type=get_three_state_flag(), help='Specifies whether the column values can used for '
                   'sorting and searching.')
        c.argument('lookup', action=AddLookup, nargs='+', help='lookupColumn')
        c.argument('name', type=str, help='The API-facing name of the column as it appears in the [fields][] on a '
                   '[listItem][]. For the user-facing name, see displayName.')
        c.argument('number', action=AddNumber, nargs='+', help='numberColumn')
        c.argument('person_or_group', action=AddPersonOrGroup, nargs='+', help='personOrGroupColumn')
        c.argument('read_only', arg_type=get_three_state_flag(), help='Specifies whether the column values can be '
                   'modified.')
        c.argument('required', arg_type=get_three_state_flag(), help='Specifies whether the column value is not '
                   'optional.')
        c.argument('text', action=AddText, nargs='+', help='textColumn')
        c.argument('locale', type=str, help='Specifies the locale from which to infer the currency symbol.',
                   arg_group='Currency')

    with self.argument_context('sites site update-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='The descriptive text for the item.')
        c.argument('group', type=str, help='The name of the group this content type belongs to. Helps organize related '
                   'content types.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Indicates whether the content type is hidden in '
                   'the list\'s \'New\' menu.')
        c.argument('name', type=str, help='The name of the content type.')
        c.argument('order', action=AddOrder, nargs='+', help='contentTypeOrder')
        c.argument('parent_id', type=str, help='The unique identifier of the content type.')
        c.argument('read_only', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified '
                   'unless this value is first set to false.')
        c.argument('sealed', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified by '
                   'users or through push-down operations. Only site collection administrators can seal or unseal '
                   'content types.')
        c.argument('column_links', action=AddColumnLinks, nargs='+', help='The collection of columns that are required '
                   'by this content type')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Inherited From')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Inherited From')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Inherited '
                   'From')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Inherited From')

    with self.argument_context('sites site update-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('drive_id', type=str, help='key: id of drive')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_item_reference_drive_id', type=str, help='Unique identifier of the drive instance '
                   'that contains the item. Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_drive_type', type=str, help='Describes the type of drive represented by this '
                   'resource. OneDrive personal drives will return personal. OneDrive for Business will return '
                   'business. SharePoint document libraries will return documentLibrary. Read-only.')
        c.argument('share_point_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('system', type=validate_file_or_dict, help='systemFacet Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('following', type=validate_file_or_dict, help='The list of items the user is following. Only in '
                   'OneDrive for Business. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='All items contained in the drive. Read-only. Nullable. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('list', type=validate_file_or_dict, help='list Expected value: json-string/json-file/@json-file.')
        c.argument('root', type=validate_file_or_dict, help='driveItem Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('special', type=validate_file_or_dict, help='Collection of common folders available in OneDrive. '
                   'Read-only. Nullable. Expected value: json-string/json-file/@json-file.')
        c.argument('deleted', type=int, help='Total space consumed by files in the recycle bin, in bytes. Read-only.',
                   arg_group='Quota')
        c.argument('remaining', type=int, help='Total space remaining before reaching the quota limit, in bytes. '
                   'Read-only.', arg_group='Quota')
        c.argument('state', type=str, help='Enumeration value that indicates the state of the storage space. '
                   'Read-only.', arg_group='Quota')
        c.argument('storage_plan_information', action=AddStoragePlanInformation, nargs='+',
                   help='storagePlanInformation', arg_group='Quota')
        c.argument('total', type=int, help='Total allowed storage space, in bytes. Read-only.', arg_group='Quota')
        c.argument('used', type=int, help='Total space used, in bytes. Read-only.', arg_group='Quota')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')

    with self.argument_context('sites site update-list') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('display_name', type=str, help='The displayable title of the list.')
        c.argument('list', action=AddList, nargs='+', help='listInfo')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('system', type=validate_file_or_dict, help='systemFacet Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('columns', type=validate_file_or_dict, help='The collection of field definitions for this list. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('content_types', type=validate_file_or_dict, help='The collection of content types present in this '
                   'list. Expected value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='All items contained in the list. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('subscriptions', action=AddSubscriptions, nargs='+', help='The set of subscriptions on the list.')

    with self.argument_context('sites sitescontenttype create-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='The name of the column  in this content type.')

    with self.argument_context('sites sitescontenttype delete-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites sitescontenttype list-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites sitescontenttype show-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites sitescontenttype update-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='The name of the column  in this content type.')

    with self.argument_context('sites siteslist create-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('boolean', type=validate_file_or_dict, help='booleanColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calculated', action=AddCalculated, nargs='+', help='calculatedColumn')
        c.argument('choice', action=AddChoice, nargs='+', help='choiceColumn')
        c.argument('column_group', type=str, help='For site columns, the name of the group this column belongs to. '
                   'Helps organize related columns.')
        c.argument('date_time', action=AddDateTime, nargs='+', help='dateTimeColumn')
        c.argument('default_value', action=AddDefaultValue, nargs='+', help='defaultColumnValue')
        c.argument('description', type=str, help='The user-facing description of the column.')
        c.argument('display_name', type=str, help='The user-facing name of the column.')
        c.argument('enforce_unique_values', arg_type=get_three_state_flag(), help='If true, no two list items may have '
                   'the same value for this column.')
        c.argument('geolocation', type=validate_file_or_dict, help='geolocationColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Specifies whether the column is displayed in the '
                   'user interface.')
        c.argument('indexed', arg_type=get_three_state_flag(), help='Specifies whether the column values can used for '
                   'sorting and searching.')
        c.argument('lookup', action=AddLookup, nargs='+', help='lookupColumn')
        c.argument('name', type=str, help='The API-facing name of the column as it appears in the [fields][] on a '
                   '[listItem][]. For the user-facing name, see displayName.')
        c.argument('number', action=AddNumber, nargs='+', help='numberColumn')
        c.argument('person_or_group', action=AddPersonOrGroup, nargs='+', help='personOrGroupColumn')
        c.argument('read_only', arg_type=get_three_state_flag(), help='Specifies whether the column values can be '
                   'modified.')
        c.argument('required', arg_type=get_three_state_flag(), help='Specifies whether the column value is not '
                   'optional.')
        c.argument('text', action=AddText, nargs='+', help='textColumn')
        c.argument('locale', type=str, help='Specifies the locale from which to infer the currency symbol.',
                   arg_group='Currency')

    with self.argument_context('sites siteslist create-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='The descriptive text for the item.')
        c.argument('group', type=str, help='The name of the group this content type belongs to. Helps organize related '
                   'content types.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Indicates whether the content type is hidden in '
                   'the list\'s \'New\' menu.')
        c.argument('name', type=str, help='The name of the content type.')
        c.argument('order', action=AddOrder, nargs='+', help='contentTypeOrder')
        c.argument('parent_id', type=str, help='The unique identifier of the content type.')
        c.argument('read_only', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified '
                   'unless this value is first set to false.')
        c.argument('sealed', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified by '
                   'users or through push-down operations. Only site collection administrators can seal or unseal '
                   'content types.')
        c.argument('column_links', action=AddColumnLinks, nargs='+', help='The collection of columns that are required '
                   'by this content type')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Inherited From')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Inherited From')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Inherited '
                   'From')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Inherited From')

    with self.argument_context('sites siteslist create-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('content_type_', options_list=['--content-type'], action=AddContentType, nargs='+',
                   help='contentTypeInfo')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('drive_item', type=validate_file_or_dict, help='driveItem Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('versions', action=AddVersions, nargs='+', help='The list of previous versions of the list item.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Fields')

    with self.argument_context('sites siteslist create-subscription') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_id', type=str, help='Identifier of the application used to create the subscription. '
                   'Read-only.')
        c.argument('change_type', type=str, help='Required. Indicates the type of change in the subscribed resource '
                   'that will raise a change notification. The supported values are: created, updated, deleted. '
                   'Multiple values can be combined using a comma-separated list.Note: Drive root item and list change '
                   'notifications support only the updated changeType. User and group change notifications support '
                   'updated and deleted changeType.')
        c.argument('client_state', type=str, help='Optional. Specifies the value of the clientState property sent by '
                   'the service in each change notification. The maximum length is 128 characters. The client can '
                   'check that the change notification came from the service by comparing the value of the clientState '
                   'property sent with the subscription with the value of the clientState property received with each '
                   'change notification.')
        c.argument('creator_id', type=str, help='Identifier of the user or service principal that created the '
                   'subscription. If the app used delegated permissions to create the subscription, this field '
                   'contains the id of the signed-in user the app called on behalf of. If the app used application '
                   'permissions, this field contains the id of the service principal corresponding to the app. '
                   'Read-only.')
        c.argument('encryption_certificate', type=str, help='A base64-encoded representation of a certificate with a '
                   'public key used to encrypt resource data in change notifications. Optional. Required when '
                   'includeResourceData is true.')
        c.argument('encryption_certificate_id', type=str, help='A custom app-provided identifier to help identify the '
                   'certificate needed to decrypt resource data. Optional.')
        c.argument('expiration_date_time', help='Required. Specifies the date and time when the webhook subscription '
                   'expires. The time is in UTC, and can be an amount of time from subscription creation that varies '
                   'for the resource subscribed to.  See the table below for maximum supported subscription length of '
                   'time.')
        c.argument('include_resource_data', arg_type=get_three_state_flag(), help='When set to true, change '
                   'notifications include resource data (such as content of a chat message). Optional.')
        c.argument('latest_supported_tls_version', type=str, help='')
        c.argument('lifecycle_notification_url', type=str, help='')
        c.argument('notification_url', type=str, help='Required. The URL of the endpoint that will receive the change '
                   'notifications. This URL must make use of the HTTPS protocol.')
        c.argument('resource', type=str, help='Required. Specifies the resource that will be monitored for changes. Do '
                   'not include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path '
                   'values for each supported resource.')

    with self.argument_context('sites siteslist delete-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslist delete-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslist delete-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslist delete-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslist delete-subscription') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('subscription_id', type=str, help='key: id of subscription', id_part='subscription')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslist list-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist list-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist list-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist list-subscription') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist show-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist show-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist show-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist show-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist show-subscription') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('subscription_id', type=str, help='key: id of subscription', id_part='subscription')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslist update-column') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('column_definition_id', type=str, help='key: id of columnDefinition')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('boolean', type=validate_file_or_dict, help='booleanColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calculated', action=AddCalculated, nargs='+', help='calculatedColumn')
        c.argument('choice', action=AddChoice, nargs='+', help='choiceColumn')
        c.argument('column_group', type=str, help='For site columns, the name of the group this column belongs to. '
                   'Helps organize related columns.')
        c.argument('date_time', action=AddDateTime, nargs='+', help='dateTimeColumn')
        c.argument('default_value', action=AddDefaultValue, nargs='+', help='defaultColumnValue')
        c.argument('description', type=str, help='The user-facing description of the column.')
        c.argument('display_name', type=str, help='The user-facing name of the column.')
        c.argument('enforce_unique_values', arg_type=get_three_state_flag(), help='If true, no two list items may have '
                   'the same value for this column.')
        c.argument('geolocation', type=validate_file_or_dict, help='geolocationColumn Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Specifies whether the column is displayed in the '
                   'user interface.')
        c.argument('indexed', arg_type=get_three_state_flag(), help='Specifies whether the column values can used for '
                   'sorting and searching.')
        c.argument('lookup', action=AddLookup, nargs='+', help='lookupColumn')
        c.argument('name', type=str, help='The API-facing name of the column as it appears in the [fields][] on a '
                   '[listItem][]. For the user-facing name, see displayName.')
        c.argument('number', action=AddNumber, nargs='+', help='numberColumn')
        c.argument('person_or_group', action=AddPersonOrGroup, nargs='+', help='personOrGroupColumn')
        c.argument('read_only', arg_type=get_three_state_flag(), help='Specifies whether the column values can be '
                   'modified.')
        c.argument('required', arg_type=get_three_state_flag(), help='Specifies whether the column value is not '
                   'optional.')
        c.argument('text', action=AddText, nargs='+', help='textColumn')
        c.argument('locale', type=str, help='Specifies the locale from which to infer the currency symbol.',
                   arg_group='Currency')

    with self.argument_context('sites siteslist update-content-type') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='The descriptive text for the item.')
        c.argument('group', type=str, help='The name of the group this content type belongs to. Helps organize related '
                   'content types.')
        c.argument('hidden', arg_type=get_three_state_flag(), help='Indicates whether the content type is hidden in '
                   'the list\'s \'New\' menu.')
        c.argument('name', type=str, help='The name of the content type.')
        c.argument('order', action=AddOrder, nargs='+', help='contentTypeOrder')
        c.argument('parent_id', type=str, help='The unique identifier of the content type.')
        c.argument('read_only', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified '
                   'unless this value is first set to false.')
        c.argument('sealed', arg_type=get_three_state_flag(), help='If true, the content type cannot be modified by '
                   'users or through push-down operations. Only site collection administrators can seal or unseal '
                   'content types.')
        c.argument('column_links', action=AddColumnLinks, nargs='+', help='The collection of columns that are required '
                   'by this content type')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Inherited From')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Inherited From')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Inherited From')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Inherited '
                   'From')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Inherited From')

    with self.argument_context('sites siteslist update-drive') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_drive_type', type=str, help='Describes the type of drive represented by this '
                   'resource. OneDrive personal drives will return personal. OneDrive for Business will return '
                   'business. SharePoint document libraries will return documentLibrary. Read-only.')
        c.argument('share_point_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('system', type=validate_file_or_dict, help='systemFacet Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('following', type=validate_file_or_dict, help='The list of items the user is following. Only in '
                   'OneDrive for Business. Expected value: json-string/json-file/@json-file.')
        c.argument('items', type=validate_file_or_dict, help='All items contained in the drive. Read-only. Nullable. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('list', type=validate_file_or_dict, help='list Expected value: json-string/json-file/@json-file.')
        c.argument('root', type=validate_file_or_dict, help='driveItem Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('special', type=validate_file_or_dict, help='Collection of common folders available in OneDrive. '
                   'Read-only. Nullable. Expected value: json-string/json-file/@json-file.')
        c.argument('deleted', type=int, help='Total space consumed by files in the recycle bin, in bytes. Read-only.',
                   arg_group='Quota')
        c.argument('remaining', type=int, help='Total space remaining before reaching the quota limit, in bytes. '
                   'Read-only.', arg_group='Quota')
        c.argument('state', type=str, help='Enumeration value that indicates the state of the storage space. '
                   'Read-only.', arg_group='Quota')
        c.argument('storage_plan_information', action=AddStoragePlanInformation, nargs='+',
                   help='storagePlanInformation', arg_group='Quota')
        c.argument('total', type=int, help='Total allowed storage space, in bytes. Read-only.', arg_group='Quota')
        c.argument('used', type=int, help='Total space used, in bytes. Read-only.', arg_group='Quota')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('device1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='Owner')

    with self.argument_context('sites siteslist update-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/json-file/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/json-file/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('content_type_', options_list=['--content-type'], action=AddContentType, nargs='+',
                   help='contentTypeInfo')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('drive_item', type=validate_file_or_dict, help='driveItem Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('versions', action=AddVersions, nargs='+', help='The list of previous versions of the list item.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Fields')

    with self.argument_context('sites siteslist update-subscription') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('subscription_id', type=str, help='key: id of subscription', id_part='subscription')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('application_id', type=str, help='Identifier of the application used to create the subscription. '
                   'Read-only.')
        c.argument('change_type', type=str, help='Required. Indicates the type of change in the subscribed resource '
                   'that will raise a change notification. The supported values are: created, updated, deleted. '
                   'Multiple values can be combined using a comma-separated list.Note: Drive root item and list change '
                   'notifications support only the updated changeType. User and group change notifications support '
                   'updated and deleted changeType.')
        c.argument('client_state', type=str, help='Optional. Specifies the value of the clientState property sent by '
                   'the service in each change notification. The maximum length is 128 characters. The client can '
                   'check that the change notification came from the service by comparing the value of the clientState '
                   'property sent with the subscription with the value of the clientState property received with each '
                   'change notification.')
        c.argument('creator_id', type=str, help='Identifier of the user or service principal that created the '
                   'subscription. If the app used delegated permissions to create the subscription, this field '
                   'contains the id of the signed-in user the app called on behalf of. If the app used application '
                   'permissions, this field contains the id of the service principal corresponding to the app. '
                   'Read-only.')
        c.argument('encryption_certificate', type=str, help='A base64-encoded representation of a certificate with a '
                   'public key used to encrypt resource data in change notifications. Optional. Required when '
                   'includeResourceData is true.')
        c.argument('encryption_certificate_id', type=str, help='A custom app-provided identifier to help identify the '
                   'certificate needed to decrypt resource data. Optional.')
        c.argument('expiration_date_time', help='Required. Specifies the date and time when the webhook subscription '
                   'expires. The time is in UTC, and can be an amount of time from subscription creation that varies '
                   'for the resource subscribed to.  See the table below for maximum supported subscription length of '
                   'time.')
        c.argument('include_resource_data', arg_type=get_three_state_flag(), help='When set to true, change '
                   'notifications include resource data (such as content of a chat message). Optional.')
        c.argument('latest_supported_tls_version', type=str, help='')
        c.argument('lifecycle_notification_url', type=str, help='')
        c.argument('notification_url', type=str, help='Required. The URL of the endpoint that will receive the change '
                   'notifications. This URL must make use of the HTTPS protocol.')
        c.argument('resource', type=str, help='Required. Specifies the resource that will be monitored for changes. Do '
                   'not include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path '
                   'values for each supported resource.')

    with self.argument_context('sites siteslistscontenttype create-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='The name of the column  in this content type.')

    with self.argument_context('sites siteslistscontenttype delete-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistscontenttype list-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistscontenttype show-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistscontenttype update-column-link') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('content_type_id', type=str, help='key: id of contentType')
        c.argument('column_link_id', type=str, help='key: id of columnLink')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='The name of the column  in this content type.')

    with self.argument_context('sites siteslistsitem create-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='Date and time the version was last modified. Read-only.')
        c.argument('publication', action=AddPublication, nargs='+', help='publicationFacet')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Fields')

    with self.argument_context('sites siteslistsitem delete-drive-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistsitem delete-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistsitem delete-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistsitem delete-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistsitem list-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitem set-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('sites siteslistsitem show-activity') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('start_date_time', type=str, help='')
        c.argument('end_date_time', type=str, help='')
        c.argument('interval', type=str, help='')

    with self.argument_context('sites siteslistsitem show-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitem show-drive-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitem show-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitem show-ref-analytic') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')

    with self.argument_context('sites siteslistsitem show-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitem update-drive-item') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('sites siteslistsitem update-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('sites siteslistsitem update-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('last_modified_date_time', help='Date and time the version was last modified. Read-only.')
        c.argument('publication', action=AddPublication, nargs='+', help='publicationFacet')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Fields')

    with self.argument_context('sites siteslistsitemsversion delete-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('sites siteslistsitemsversion restore-version') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')

    with self.argument_context('sites siteslistsitemsversion show-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites siteslistsitemsversion update-field') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('list_id', type=str, help='key: id of list')
        c.argument('list_item_id', type=str, help='key: id of listItem')
        c.argument('list_item_version_id', type=str, help='key: id of listItemVersion')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('sites sitesonenotenotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('post_content_schema_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebook get-notebook-from-web-url') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('web_url', type=str, help='')

    with self.argument_context('sites sitesonenotenotebook show-recent-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('include_personal_notebooks', arg_type=get_three_state_flag(), help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenoteNotebooksSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionspagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenoteNotebooksSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotenotebookssectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotenotebookssectionspagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionspagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionspagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotenotebookssectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenotePagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotepage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotepagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenotePagesParentnotebookSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentnotebooksectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionpage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionpage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenotePagesParentsectionPagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotepagesparentsectionpage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectionparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectiongroupparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectiongroupparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectiongroupsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotepagesparentsectiongroupsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenoteSectiongroupsParentnotebookSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionspagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupsparentnotebooksectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddSitesOnenoteSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotesectiongroupssectionspagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspagesparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspagesparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionspagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionsparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectiongroupssectionsparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspage copy-to-section') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspage onenote-patch-content') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddCommands, nargs='+', help='')

    with self.argument_context('sites sitesonenotesectionspage preview') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionspagesparentsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentsectiongroupparentnotebooksection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentsectiongroupparentnotebooksection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites sitesonenotesectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('site_id', type=str, help='key: id of site')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('string_site_id', type=str, help='')

    with self.argument_context('sites user create-ref-followed-site') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('sites user list-followed-site') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('sites user list-ref-followed-site') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
