# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_usersactions.action import (
    AddAttachmentItem,
    AddEndTime,
    AddBody,
    AddInternetMessageHeaders,
    AddAttachments,
    AddExtensions,
    AddMultiValueExtendedProperties,
    AddSingleValueExtendedProperties,
    AddAddLicenses,
    AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands,
    AddUsersOnenoteNotebooksSectionsPagesCommands,
    AddUsersOnenotePagesCommands,
    AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands,
    AddUsersOnenotePagesParentnotebookSectionsPagesCommands,
    AddUsersOnenotePagesParentsectionPagesCommands,
    AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands,
    AddUsersOnenoteSectiongroupsSectionsPagesCommands,
    AddCommands,
    AddChatInfo
)


def load_arguments(self, _):

    with self.argument_context('usersactions userscalendarviewattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendarviewcalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarviewinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarviewinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarviewinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendareventsattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendareventscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendareventsinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendareventsinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendareventsinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendareventsinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendareventsinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewcalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarviewinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendargroupscalendarscalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarseventsattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendargroupscalendarseventscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendargroupscalendarseventsinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarseventsinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarseventsinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendargroupscalendarseventsinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendargroupscalendarseventsinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarsevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarsevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendarsevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendargroupscalendarsevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendargroupscalendarsevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendargroupscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarscalendarviewattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendarscalendarviewcalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarscalendarviewinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarscalendarviewinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarscalendarviewinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarscalendarviewinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarscalendarviewinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarscalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarscalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarscalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarscalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarscalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarseventsattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendarseventscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarseventsinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarseventsinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarseventsinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarseventsinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarseventsinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarsevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarsevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarsevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarsevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarsevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarviewattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userscalendarviewcalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarviewcalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarviewcalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendarevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendarevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendarevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarviewcalendarevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarviewcalendarevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewcalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userscalendarviewinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarviewinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarviewinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarviewinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userscalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions userscalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userscalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventsattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions userseventscalendarview accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendarview decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendarview dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userseventscalendarview snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userseventscalendarview tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendarevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendarevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendarevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userseventscalendarevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userseventscalendarevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventscalendar get-schedule') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('usersactions userseventsinstance accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventsinstance decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions userseventsinstance dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('usersactions userseventsinstance snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions userseventsinstance tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersevent accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersevent decline') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersevent dismiss-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('usersactions usersevent snooze-reminder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('usersactions usersevent tentatively-accept') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersmailfolderschildfolder copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmailfolderschildfolder move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('mail_folder_id1', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmailfoldersmessagesattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions usersmailfoldersmessage copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmailfoldersmessage create-forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('microsoft_graph_message_to_recipients', type=validate_file_or_dict, help='The To: recipients for '
                   'the message. Expected value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage create-reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage create-reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('microsoft_graph_message_to_recipients', type=validate_file_or_dict, help='The To: recipients for '
                   'the message. Expected value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmailfoldersmessage reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmailfoldersmessage send') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions usersmailfolder copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmailfolder move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('mail_folder_id', type=str, help='key: id of mailFolder')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmanageddevice bypass-activation-lock') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice clean-window-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('keep_user_data', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersmanageddevice delete-user-from-shared-apple-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('user_principal_name', type=str, help='')

    with self.argument_context('usersactions usersmanageddevice disable-lost-mode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice locate-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice logout-shared-apple-device-active-user') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice reboot-now') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice recover-passcode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice remote-lock') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice request-remote-assistance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice reset-passcode') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice retire') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice shut-down') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice sync-device') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice update-window-device-account') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('calendar_sync_enabled', arg_type=get_three_state_flag(), help='Not yet documented',
                   arg_group='Update Windows Device Account Action Parameter')
        c.argument('device_account_email', type=str, help='Not yet documented', arg_group='Update Windows Device '
                   'Account Action Parameter')
        c.argument('exchange_server', type=str, help='Not yet documented', arg_group='Update Windows Device Account '
                   'Action Parameter')
        c.argument('password_rotation_enabled', arg_type=get_three_state_flag(), help='Not yet documented',
                   arg_group='Update Windows Device Account Action Parameter')
        c.argument('session_initiation_protocal_address', type=str, help='Not yet documented', arg_group='Update '
                   'Windows Device Account Action Parameter')
        c.argument('password', type=str, help='Not yet documented', arg_group='Update Windows Device Account Action '
                   'Parameter Device Account')

    with self.argument_context('usersactions usersmanageddevice window-defender-scan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('quick_scan', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions usersmanageddevice window-defender-update-signature') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')

    with self.argument_context('usersactions usersmanageddevice wipe') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('managed_device_id', type=str, help='key: id of managedDevice')
        c.argument('keep_enrollment_data', arg_type=get_three_state_flag(), help='')
        c.argument('keep_user_data', arg_type=get_three_state_flag(), help='')
        c.argument('mac_os_unlock_code', type=str, help='')

    with self.argument_context('usersactions usersmessagesattachment create-upload-session') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('usersactions usersmessage copy') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmessage create-forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('microsoft_graph_message_to_recipients', type=validate_file_or_dict, help='The To: recipients for '
                   'the message. Expected value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage create-reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage create-reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage forward') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('microsoft_graph_message_to_recipients', type=validate_file_or_dict, help='The To: recipients for '
                   'the message. Expected value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage move') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('destination_id', type=str, help='')

    with self.argument_context('usersactions usersmessage reply') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage reply-all') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')
        c.argument('comment', type=str, help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions usersmessage send') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('message_id', type=str, help='key: id of message')

    with self.argument_context('usersactions user assign-license') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('add_licenses', action=AddAddLicenses, nargs='+', help='')
        c.argument('remove_licenses', nargs='+', help='')

    with self.argument_context('usersactions user change-password') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('current_password', type=str, help='')
        c.argument('new_password', type=str, help='')

    with self.argument_context('usersactions user check-member-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('group_ids', nargs='+', help='')

    with self.argument_context('usersactions user check-member-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('ids', nargs='+', help='')

    with self.argument_context('usersactions user export-personal-data') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('storage_location', type=str, help='')

    with self.argument_context('usersactions user find-meeting-time') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='Action parameters Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('usersactions user get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user get-by-id') as c:
        c.argument('ids', nargs='+', help='')
        c.argument('types', nargs='+', help='')

    with self.argument_context('usersactions user get-mail-tip') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('email_addresses', nargs='+', help='')
        c.argument('mail_tips_options', arg_type=get_enum_type(['automaticReplies', 'mailboxFullStatus',
                                                                'customMailTip', 'externalMemberCount',
                                                                'totalMemberCount', 'maxMessageSize',
                                                                'deliveryRestriction', 'moderationStatus',
                                                                'recipientScope', 'recipientSuggestions']), help='')

    with self.argument_context('usersactions user get-member-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user get-member-object') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('usersactions user remove-all-device-from-management') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user reprocess-license-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user restore') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user revoke-sign-in-session') as c:
        c.argument('user_id', type=str, help='key: id of user')

    with self.argument_context('usersactions user send-mail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('save_to_sent_items', arg_type=get_three_state_flag(), help='')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.', arg_group='Message')
        c.argument('categories', nargs='+', help='The categories associated with the item', arg_group='Message')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.', arg_group='Message')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'', arg_group='Message')
        c.argument('bcc_recipients', type=validate_file_or_dict, help='The Bcc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('body_preview', type=str,
                   help='The first 255 characters of the message body. It is in text format.', arg_group='Message')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('conversation_id', type=str, help='The ID of the conversation the email belongs to.',
                   arg_group='Message')
        c.argument('conversation_index', help='Indicates the position of the message within the conversation.',
                   arg_group='Message')
        c.argument('flag', type=validate_file_or_dict, help='followupFlag Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('from', type=validate_file_or_dict, help='recipient Expected value: json-string/json-file/@json-file'
                   '.', arg_group='Message')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the message has '
                   'attachments. This property doesn\'t include inline attachments, so if a message contains only '
                   'inline attachments, this property is false. To verify the existence of inline attachments, parse '
                   'the body property to look for a src attribute, such as <IMG src=\'cid:image001.jpg@01D26CD8.6C05F07'
                   '0\'>.', arg_group='Message')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='', arg_group='Message')
        c.argument('inference_classification', arg_type=get_enum_type(['focused', 'other']), help='',
                   arg_group='Message')
        c.argument('internet_message_headers', action=AddInternetMessageHeaders, nargs='+', help='A collection of '
                   'message headers defined by RFC5322. The set includes message headers indicating the network path '
                   'taken by a message from the sender to the recipient. It can also contain custom message headers '
                   'that hold app data for the message.  Returned only on applying a $select query option. Read-only.',
                   arg_group='Message')
        c.argument('internet_message_id', type=str, help='The message ID in the format specified by RFC2822.',
                   arg_group='Message')
        c.argument('is_delivery_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('is_draft', arg_type=get_three_state_flag(), help='Indicates whether the message is a draft. A '
                   'message is a draft if it hasn\'t been sent yet.', arg_group='Message')
        c.argument('is_read', arg_type=get_three_state_flag(), help='Indicates whether the message has been read.',
                   arg_group='Message')
        c.argument('is_read_receipt_requested', arg_type=get_three_state_flag(), help='Indicates whether a read '
                   'receipt is requested for the message.', arg_group='Message')
        c.argument('parent_folder_id', type=str, help='The unique identifier for the message\'s parent mailFolder.',
                   arg_group='Message')
        c.argument('received_date_time', help='The date and time the message was received.', arg_group='Message')
        c.argument('reply_to', type=validate_file_or_dict, help='The email addresses to use when replying. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sender', type=validate_file_or_dict, help='recipient Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Message')
        c.argument('sent_date_time', help='The date and time the message was sent.', arg_group='Message')
        c.argument('subject', type=str, help='The subject of the message.', arg_group='Message')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the message. Expected '
                   'value: json-string/json-file/@json-file.', arg_group='Message')
        c.argument('unique_body', action=AddBody, nargs='+', help='itemBody', arg_group='Message')
        c.argument('web_link', type=str, help='The URL to open the message in Outlook Web App.You can append an '
                   'ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not '
                   'present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to '
                   '0, then the browser will show the message in the Outlook Web App review pane.The message will open '
                   'in the browser if you are logged in to your mailbox via Outlook Web App. You will be prompted to '
                   'login if you are not already logged in with the browser.This URL can be accessed from within an '
                   'iFrame.', arg_group='Message')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The fileAttachment and itemAttachment '
                   'attachments for the message.', arg_group='Message')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the message. Nullable.', arg_group='Message')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the message. Nullable.',
                   arg_group='Message')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the message. Nullable.',
                   arg_group='Message')

    with self.argument_context('usersactions user translate-exchange-id') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('input_ids', nargs='+', help='')
        c.argument('target_id_type', arg_type=get_enum_type(['entryId', 'ewsId', 'immutableEntryId', 'restId',
                                                             'restImmutableEntryId']), help='')
        c.argument('source_id_type', arg_type=get_enum_type(['entryId', 'ewsId', 'immutableEntryId', 'restId',
                                                             'restImmutableEntryId']), help='')

    with self.argument_context('usersactions user validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('usersactions user wipe-managed-app-registration-by-device-tag') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('device_tag', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebook get-notebook-from-web-url') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('web_url', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionspagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionspagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionspagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteNotebooksSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotenotebookssectionspagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionspagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionspagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotenotebookssectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupssectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupssectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentnotebookSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentnotebooksectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionpage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionpage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenotePagesParentsectionPagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectionparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectiongroupparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectiongroupparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectiongroupsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotepagesparentsectiongroupsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionspagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionspagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionspagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupsparentnotebooksectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddUsersOnenoteSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspagesparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspagesparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionspagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionsparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectiongroupssectionsparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspage copy-to-section') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspage onenote-patch-content') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddCommands, nargs='+', help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionspagesparentsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebooksectiongroupsparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebooksectiongroupssection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebooksectiongroupssection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentsectiongroupparentnotebook copy-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentsectiongroupparentnotebooksection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentsectiongroupparentnotebooksection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentsectiongroupsection copy-to-notebook') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonenotesectionsparentsectiongroupsection copy-to-section-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('usersactions usersonlinemeeting create-or-get') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('chat_info', action=AddChatInfo, nargs='+', help='chatInfo')
        c.argument('end_date_time', help='')
        c.argument('external_id', type=str, help='')
        c.argument('start_date_time', help='')
        c.argument('subject', type=str, help='')
        c.argument('attendees', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file.',
                   arg_group='Participants')
        c.argument('organizer', type=validate_file_or_dict, help='meetingParticipantInfo Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Participants')
