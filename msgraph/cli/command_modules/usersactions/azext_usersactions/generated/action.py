# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict
from knack.util import CLIError





class AddAttachmentItem(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.attachment_item = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'attachment-type':
                d['attachment_type'] = v[0]
            
            elif kl == 'content-type':
                d['content_type'] = v[0]
            
            elif kl == 'is-inline':
                d['is_inline'] = v[0]
            
            elif kl == 'name':
                d['name'] = v[0]
            
            elif kl == 'size':
                d['size'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter attachment-item. All possible keys are: attachment-type, content-type, is-inline, name, size'.
                format(k))
            
        
        return d



class AddEndTime(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.end_time = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'date-time':
                d['date_time'] = v[0]
            
            elif kl == 'time-zone':
                d['time_zone'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter end-time. All possible keys are: date-time, time-zone'.
                format(k))
            
        
        return d



class AddBody(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.body = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'content-type':
                d['content_type'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter body. All possible keys are: content, content-type'.
                format(k))
            
        
        return d



class AddInternetMessageHeaders(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddInternetMessageHeaders, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'name':
                d['name'] = v[0]
            
            elif kl == 'value':
                d['value'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter internet-message-headers. All possible keys are: name, value'.
                format(k))
            
        
        return d



class AddAttachments(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAttachments, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'content-type':
                d['content_type'] = v[0]
            
            elif kl == 'is-inline':
                d['is_inline'] = v[0]
            
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            
            elif kl == 'name':
                d['name'] = v[0]
            
            elif kl == 'size':
                d['size'] = v[0]
            
            elif kl == 'id':
                d['id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter attachments. All possible keys are: content-type, is-inline, last-modified-date-time, name, size, id'.
                format(k))
            
        
        return d



class AddExtensions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddExtensions, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'id':
                d['id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extensions. All possible keys are: id'.
                format(k))
            
        
        return d



class AddMultiValueExtendedProperties(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMultiValueExtendedProperties, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'value':
                d['value'] = v
                
            
            elif kl == 'id':
                d['id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter multi-value-extended-properties. All possible keys are: value, id'.
                format(k))
            
        
        return d



class AddSingleValueExtendedProperties(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSingleValueExtendedProperties, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'value':
                d['value'] = v[0]
            
            elif kl == 'id':
                d['id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter single-value-extended-properties. All possible keys are: value, id'.
                format(k))
            
        
        return d



class AddAddLicenses(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAddLicenses, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'disabled-plans':
                d['disabled_plans'] = v
                
            
            elif kl == 'sku-id':
                d['sku_id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter add-licenses. All possible keys are: disabled-plans, sku-id'.
                format(k))
            
        
        return d



class AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenoteNotebooksSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenoteNotebooksSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenoteNotebooksSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenotePagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenotePagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenotePagesParentnotebookSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenotePagesParentnotebookSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenotePagesParentsectionPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenotePagesParentsectionPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenoteSectiongroupsParentnotebookSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddUsersOnenoteSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUsersOnenoteSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommands, self).__call__(parser, namespace, action, option_string)
        

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'action':
                d['action'] = v[0]
            
            elif kl == 'content':
                d['content'] = v[0]
            
            elif kl == 'position':
                d['position'] = v[0]
            
            elif kl == 'target':
                d['target'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, content, position, target'.
                format(k))
            
        
        return d



class AddChatInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.chat_info = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            
            
            if kl == 'message-id':
                d['message_id'] = v[0]
            
            elif kl == 'reply-chain-message-id':
                d['reply_chain_message_id'] = v[0]
            
            elif kl == 'thread-id':
                d['thread_id'] = v[0]
            
            else:
                raise CLIError('Unsupported Key {} is provided for parameter chat-info. All possible keys are: message-id, reply-chain-message-id, thread-id'.
                format(k))
            
        
        return d


