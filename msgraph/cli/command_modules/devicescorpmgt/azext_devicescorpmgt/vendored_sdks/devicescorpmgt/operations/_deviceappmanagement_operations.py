# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class deviceappmanagementOperations(object):
    """deviceappmanagementOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_corporate_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_android_managed_app_protections(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5itemsitem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6itemsitem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get7itemsitem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofandroidmanagedappprotection"]
        """Get androidManagedAppProtections from deviceAppManagement.

        Get androidManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Get5itemsitem]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Get6itemsitem]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Get7itemsitem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofandroidmanagedappprotection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofandroidmanagedappprotection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofandroidmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_android_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofandroidmanagedappprotection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections'}  # type: ignore

    def create_android_managed_app_protections(
        self,
        body,  # type: "models.microsoftgraphandroidmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphandroidmanagedappprotection"
        """Create new navigation property to androidManagedAppProtections for deviceAppManagement.

        Create new navigation property to androidManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphandroidmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphandroidmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphandroidmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphandroidmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_android_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphandroidmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphandroidmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections'}  # type: ignore

    def get_android_managed_app_protections(
        self,
        android_managed_app_protection_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2itemsitem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphandroidmanagedappprotection"
        """Get androidManagedAppProtections from deviceAppManagement.

        Get androidManagedAppProtections from deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Get2itemsitem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphandroidmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphandroidmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphandroidmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphandroidmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    def update_android_managed_app_protections(
        self,
        android_managed_app_protection_id,  # type: str
        body,  # type: "models.microsoftgraphandroidmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property androidManagedAppProtections in deviceAppManagement.

        Update the navigation property androidManagedAppProtections in deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphandroidmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphandroidmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    def delete_android_managed_app_protections(
        self,
        android_managed_app_protection_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property androidManagedAppProtections for deviceAppManagement.

        Delete navigation property androidManagedAppProtections for deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    def list_default_managed_app_protections(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum28"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofdefaultmanagedappprotection"]
        """Get defaultManagedAppProtections from deviceAppManagement.

        Get defaultManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum27]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum29]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofdefaultmanagedappprotection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofdefaultmanagedappprotection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofdefaultmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_default_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofdefaultmanagedappprotection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections'}  # type: ignore

    def create_default_managed_app_protections(
        self,
        body,  # type: "models.microsoftgraphdefaultmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphdefaultmanagedappprotection"
        """Create new navigation property to defaultManagedAppProtections for deviceAppManagement.

        Create new navigation property to defaultManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphdefaultmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphdefaultmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphdefaultmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphdefaultmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_default_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphdefaultmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphdefaultmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections'}  # type: ignore

    def get_default_managed_app_protections(
        self,
        default_managed_app_protection_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphdefaultmanagedappprotection"
        """Get defaultManagedAppProtections from deviceAppManagement.

        Get defaultManagedAppProtections from deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum31]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphdefaultmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphdefaultmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphdefaultmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphdefaultmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    def update_default_managed_app_protections(
        self,
        default_managed_app_protection_id,  # type: str
        body,  # type: "models.microsoftgraphdefaultmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property defaultManagedAppProtections in deviceAppManagement.

        Update the navigation property defaultManagedAppProtections in deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphdefaultmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphdefaultmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    def delete_default_managed_app_protections(
        self,
        default_managed_app_protection_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property defaultManagedAppProtections for deviceAppManagement.

        Delete navigation property defaultManagedAppProtections for deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    def list_ios_managed_app_protections(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum36"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum37"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum38"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofiosmanagedappprotection"]
        """Get iosManagedAppProtections from deviceAppManagement.

        Get iosManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum36]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum37]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum38]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofiosmanagedappprotection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofiosmanagedappprotection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofiosmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ios_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofiosmanagedappprotection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections'}  # type: ignore

    def create_ios_managed_app_protections(
        self,
        body,  # type: "models.microsoftgraphiosmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphiosmanagedappprotection"
        """Create new navigation property to iosManagedAppProtections for deviceAppManagement.

        Create new navigation property to iosManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphiosmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphiosmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphiosmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphiosmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ios_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphiosmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphiosmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections'}  # type: ignore

    def get_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum39"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum40"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphiosmanagedappprotection"
        """Get iosManagedAppProtections from deviceAppManagement.

        Get iosManagedAppProtections from deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum39]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum40]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphiosmanagedappprotection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphiosmanagedappprotection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphiosmanagedappprotection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphiosmanagedappprotection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    def update_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id,  # type: str
        body,  # type: "models.microsoftgraphiosmanagedappprotection"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property iosManagedAppProtections in deviceAppManagement.

        Update the navigation property iosManagedAppProtections in deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphiosmanagedappprotection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphiosmanagedappprotection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    def delete_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property iosManagedAppProtections for deviceAppManagement.

        Delete navigation property iosManagedAppProtections for deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    def list_managed_app_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum45"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum46"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmanagedapppolicy"]
        """Get managedAppPolicies from deviceAppManagement.

        Get managedAppPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum45]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum46]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmanagedapppolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmanagedapppolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmanagedapppolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmanagedapppolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies'}  # type: ignore

    def create_managed_app_policies(
        self,
        body,  # type: "models.microsoftgraphmanagedapppolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedapppolicy"
        """Create new navigation property to managedAppPolicies for deviceAppManagement.

        Create new navigation property to managedAppPolicies for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedapppolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedapppolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedapppolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedapppolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedapppolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedapppolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies'}  # type: ignore

    def get_managed_app_policies(
        self,
        managed_app_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum47"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedapppolicy"
        """Get managedAppPolicies from deviceAppManagement.

        Get managedAppPolicies from deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum47]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedapppolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedapppolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedapppolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedapppolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    def update_managed_app_policies(
        self,
        managed_app_policy_id,  # type: str
        body,  # type: "models.microsoftgraphmanagedapppolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property managedAppPolicies in deviceAppManagement.

        Update the navigation property managedAppPolicies in deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedapppolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedapppolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    def delete_managed_app_policies(
        self,
        managed_app_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property managedAppPolicies for deviceAppManagement.

        Delete navigation property managedAppPolicies for deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    def list_managed_app_registrations(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum48"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum49"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum50"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmanagedappregistration"]
        """Get managedAppRegistrations from deviceAppManagement.

        Get managedAppRegistrations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum48]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum49]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum50]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmanagedappregistration or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmanagedappregistration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmanagedappregistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_registrations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmanagedappregistration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations'}  # type: ignore

    def create_managed_app_registrations(
        self,
        body,  # type: "models.microsoftgraphmanagedappregistration"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedappregistration"
        """Create new navigation property to managedAppRegistrations for deviceAppManagement.

        Create new navigation property to managedAppRegistrations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedappregistration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedappregistration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedappregistration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedappregistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_registrations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedappregistration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedappregistration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations'}  # type: ignore

    def get_managed_app_registrations(
        self,
        managed_app_registration_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum51"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum52"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedappregistration"
        """Get managedAppRegistrations from deviceAppManagement.

        Get managedAppRegistrations from deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum51]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum52]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedappregistration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedappregistration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedappregistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedappregistration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    def update_managed_app_registrations(
        self,
        managed_app_registration_id,  # type: str
        body,  # type: "models.microsoftgraphmanagedappregistration"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property managedAppRegistrations in deviceAppManagement.

        Update the navigation property managedAppRegistrations in deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedappregistration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedappregistration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    def delete_managed_app_registrations(
        self,
        managed_app_registration_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property managedAppRegistrations for deviceAppManagement.

        Delete navigation property managedAppRegistrations for deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    def list_managed_app_statuses(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum62"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum63"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmanagedappstatus"]
        """Get managedAppStatuses from deviceAppManagement.

        Get managedAppStatuses from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum62]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum63]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmanagedappstatus or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmanagedappstatus]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmanagedappstatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_statuses.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmanagedappstatus', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses'}  # type: ignore

    def create_managed_app_statuses(
        self,
        body,  # type: "models.microsoftgraphmanagedappstatus"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedappstatus"
        """Create new navigation property to managedAppStatuses for deviceAppManagement.

        Create new navigation property to managedAppStatuses for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedappstatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedappstatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedappstatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedappstatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_statuses.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedappstatus')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedappstatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses'}  # type: ignore

    def get_managed_app_statuses(
        self,
        managed_app_status_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum64"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedappstatus"
        """Get managedAppStatuses from deviceAppManagement.

        Get managedAppStatuses from deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum64]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedappstatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedappstatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedappstatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedappstatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    def update_managed_app_statuses(
        self,
        managed_app_status_id,  # type: str
        body,  # type: "models.microsoftgraphmanagedappstatus"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property managedAppStatuses in deviceAppManagement.

        Update the navigation property managedAppStatuses in deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedappstatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedappstatus')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    def delete_managed_app_statuses(
        self,
        managed_app_status_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property managedAppStatuses for deviceAppManagement.

        Delete navigation property managedAppStatuses for deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    def list_managed_e_books(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum65"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum66"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum67"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmanagedebook"]
        """Get managedEBooks from deviceAppManagement.

        Get managedEBooks from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum65]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum66]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum67]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmanagedebook or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmanagedebook]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmanagedebook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_e_books.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmanagedebook', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks'}  # type: ignore

    def create_managed_e_books(
        self,
        body,  # type: "models.microsoftgraphmanagedebook"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedebook"
        """Create new navigation property to managedEBooks for deviceAppManagement.

        Create new navigation property to managedEBooks for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedebook
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedebook, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedebook
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedebook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_e_books.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedebook')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedebook', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks'}  # type: ignore

    def get_managed_e_books(
        self,
        managed_e_book_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum68"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum69"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanagedebook"
        """Get managedEBooks from deviceAppManagement.

        Get managedEBooks from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum68]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum69]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanagedebook, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanagedebook
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanagedebook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanagedebook', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    def update_managed_e_books(
        self,
        managed_e_book_id,  # type: str
        body,  # type: "models.microsoftgraphmanagedebook"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property managedEBooks in deviceAppManagement.

        Update the navigation property managedEBooks in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmanagedebook
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanagedebook')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    def delete_managed_e_books(
        self,
        managed_e_book_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property managedEBooks for deviceAppManagement.

        Delete navigation property managedEBooks for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    def list_mdm_windows_information_protection_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum85"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum86"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum87"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmdmwindowsinformationprotectionpolicy"]
        """Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum85]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum86]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum87]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmdmwindowsinformationprotectionpolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmdmwindowsinformationprotectionpolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmdmwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmdmwindowsinformationprotectionpolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies'}  # type: ignore

    def create_mdm_windows_information_protection_policies(
        self,
        body,  # type: "models.microsoftgraphmdmwindowsinformationprotectionpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmdmwindowsinformationprotectionpolicy"
        """Create new navigation property to mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        Create new navigation property to mdmWindowsInformationProtectionPolicies for
        deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmdmwindowsinformationprotectionpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmdmwindowsinformationprotectionpolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmdmwindowsinformationprotectionpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmdmwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mdm_windows_information_protection_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmdmwindowsinformationprotectionpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmdmwindowsinformationprotectionpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies'}  # type: ignore

    def get_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum88"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum89"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmdmwindowsinformationprotectionpolicy"
        """Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum88]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum89]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmdmwindowsinformationprotectionpolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmdmwindowsinformationprotectionpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmdmwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmdmwindowsinformationprotectionpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    def update_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id,  # type: str
        body,  # type: "models.microsoftgraphmdmwindowsinformationprotectionpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mdmWindowsInformationProtectionPolicies in deviceAppManagement.

        Update the navigation property mdmWindowsInformationProtectionPolicies in deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmdmwindowsinformationprotectionpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmdmwindowsinformationprotectionpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    def delete_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        Delete navigation property mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    def sync_microsoft_store_for_business_apps(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action syncMicrosoftStoreForBusinessApps.

        Invoke action syncMicrosoftStoreForBusinessApps.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.sync_microsoft_store_for_business_apps.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    sync_microsoft_store_for_business_apps.metadata = {'url': '/deviceAppManagement/microsoft.graph.syncMicrosoftStoreForBusinessApps'}  # type: ignore

    def list_mobile_app_categories(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum90"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum91"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmobileappcategory"]
        """Get mobileAppCategories from deviceAppManagement.

        Get mobileAppCategories from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum90]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum91]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmobileappcategory or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmobileappcategory]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmobileappcategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_app_categories.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmobileappcategory', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories'}  # type: ignore

    def create_mobile_app_categories(
        self,
        body,  # type: "models.microsoftgraphmobileappcategory"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmobileappcategory"
        """Create new navigation property to mobileAppCategories for deviceAppManagement.

        Create new navigation property to mobileAppCategories for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmobileappcategory
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmobileappcategory, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmobileappcategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmobileappcategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_app_categories.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmobileappcategory')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmobileappcategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories'}  # type: ignore

    def get_mobile_app_categories(
        self,
        mobile_app_category_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum92"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmobileappcategory"
        """Get mobileAppCategories from deviceAppManagement.

        Get mobileAppCategories from deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum92]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmobileappcategory, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmobileappcategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmobileappcategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmobileappcategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    def update_mobile_app_categories(
        self,
        mobile_app_category_id,  # type: str
        body,  # type: "models.microsoftgraphmobileappcategory"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mobileAppCategories in deviceAppManagement.

        Update the navigation property mobileAppCategories in deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmobileappcategory
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmobileappcategory')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    def delete_mobile_app_categories(
        self,
        mobile_app_category_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property mobileAppCategories for deviceAppManagement.

        Delete navigation property mobileAppCategories for deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    def list_mobile_app_configurations(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum93"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum94"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum95"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmanageddevicemobileappconfiguration"]
        """Get mobileAppConfigurations from deviceAppManagement.

        Get mobileAppConfigurations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum93]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum94]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum95]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmanageddevicemobileappconfiguration or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmanageddevicemobileappconfiguration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmanageddevicemobileappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_app_configurations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmanageddevicemobileappconfiguration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations'}  # type: ignore

    def create_mobile_app_configurations(
        self,
        body,  # type: "models.microsoftgraphmanageddevicemobileappconfiguration"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanageddevicemobileappconfiguration"
        """Create new navigation property to mobileAppConfigurations for deviceAppManagement.

        Create new navigation property to mobileAppConfigurations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmanageddevicemobileappconfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanageddevicemobileappconfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanageddevicemobileappconfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanageddevicemobileappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_app_configurations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanageddevicemobileappconfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanageddevicemobileappconfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations'}  # type: ignore

    def get_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum96"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum97"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmanageddevicemobileappconfiguration"
        """Get mobileAppConfigurations from deviceAppManagement.

        Get mobileAppConfigurations from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum96]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum97]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmanageddevicemobileappconfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmanageddevicemobileappconfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmanageddevicemobileappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmanageddevicemobileappconfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    def update_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id,  # type: str
        body,  # type: "models.microsoftgraphmanageddevicemobileappconfiguration"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mobileAppConfigurations in deviceAppManagement.

        Update the navigation property mobileAppConfigurations in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmanageddevicemobileappconfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmanageddevicemobileappconfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    def delete_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property mobileAppConfigurations for deviceAppManagement.

        Delete navigation property mobileAppConfigurations for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    def list_mobile_apps(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum109"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum110"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum111"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofmobileapp"]
        """Get mobileApps from deviceAppManagement.

        Get mobileApps from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum109]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum110]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum111]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofmobileapp or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofmobileapp]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofmobileapp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_apps.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofmobileapp', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps'}  # type: ignore

    def create_mobile_apps(
        self,
        body,  # type: "models.microsoftgraphmobileapp"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmobileapp"
        """Create new navigation property to mobileApps for deviceAppManagement.

        Create new navigation property to mobileApps for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphmobileapp
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmobileapp, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmobileapp
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmobileapp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_apps.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmobileapp')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmobileapp', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps'}  # type: ignore

    def get_mobile_apps(
        self,
        mobile_app_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum112"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum113"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphmobileapp"
        """Get mobileApps from deviceAppManagement.

        Get mobileApps from deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum112]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum113]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphmobileapp, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphmobileapp
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphmobileapp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphmobileapp', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    def update_mobile_apps(
        self,
        mobile_app_id,  # type: str
        body,  # type: "models.microsoftgraphmobileapp"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mobileApps in deviceAppManagement.

        Update the navigation property mobileApps in deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphmobileapp
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphmobileapp')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    def delete_mobile_apps(
        self,
        mobile_app_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property mobileApps for deviceAppManagement.

        Delete navigation property mobileApps for deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    def list_targeted_managed_app_configurations(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum120"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum121"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum122"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionoftargetedmanagedappconfiguration"]
        """Get targetedManagedAppConfigurations from deviceAppManagement.

        Get targetedManagedAppConfigurations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum120]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum121]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum122]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionoftargetedmanagedappconfiguration or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionoftargetedmanagedappconfiguration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionoftargetedmanagedappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_targeted_managed_app_configurations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionoftargetedmanagedappconfiguration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations'}  # type: ignore

    def create_targeted_managed_app_configurations(
        self,
        body,  # type: "models.microsoftgraphtargetedmanagedappconfiguration"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtargetedmanagedappconfiguration"
        """Create new navigation property to targetedManagedAppConfigurations for deviceAppManagement.

        Create new navigation property to targetedManagedAppConfigurations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphtargetedmanagedappconfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtargetedmanagedappconfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphtargetedmanagedappconfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtargetedmanagedappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_targeted_managed_app_configurations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtargetedmanagedappconfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtargetedmanagedappconfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations'}  # type: ignore

    def get_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum123"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum124"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphtargetedmanagedappconfiguration"
        """Get targetedManagedAppConfigurations from deviceAppManagement.

        Get targetedManagedAppConfigurations from deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum123]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum124]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphtargetedmanagedappconfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphtargetedmanagedappconfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphtargetedmanagedappconfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphtargetedmanagedappconfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    def update_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id,  # type: str
        body,  # type: "models.microsoftgraphtargetedmanagedappconfiguration"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property targetedManagedAppConfigurations in deviceAppManagement.

        Update the navigation property targetedManagedAppConfigurations in deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphtargetedmanagedappconfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphtargetedmanagedappconfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    def delete_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property targetedManagedAppConfigurations for deviceAppManagement.

        Delete navigation property targetedManagedAppConfigurations for deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    def list_vpp_tokens(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum132"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum133"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofvpptoken"]
        """Get vppTokens from deviceAppManagement.

        Get vppTokens from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum132]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum133]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofvpptoken or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofvpptoken]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofvpptoken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_vpp_tokens.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofvpptoken', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens'}  # type: ignore

    def create_vpp_tokens(
        self,
        body,  # type: "models.microsoftgraphvpptoken"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphvpptoken"
        """Create new navigation property to vppTokens for deviceAppManagement.

        Create new navigation property to vppTokens for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphvpptoken
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphvpptoken, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphvpptoken
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphvpptoken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_vpp_tokens.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphvpptoken')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphvpptoken', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens'}  # type: ignore

    def get_vpp_tokens(
        self,
        vpp_token_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum134"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphvpptoken"
        """Get vppTokens from deviceAppManagement.

        Get vppTokens from deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum134]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphvpptoken, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphvpptoken
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphvpptoken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphvpptoken', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    def update_vpp_tokens(
        self,
        vpp_token_id,  # type: str
        body,  # type: "models.microsoftgraphvpptoken"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property vppTokens in deviceAppManagement.

        Update the navigation property vppTokens in deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphvpptoken
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphvpptoken')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    def delete_vpp_tokens(
        self,
        vpp_token_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property vppTokens for deviceAppManagement.

        Delete navigation property vppTokens for deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    def list_windows_information_protection_policies(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum135"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum136"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum137"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.collectionofwindowsinformationprotectionpolicy"]
        """Get windowsInformationProtectionPolicies from deviceAppManagement.

        Get windowsInformationProtectionPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum135]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum136]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum137]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either collectionofwindowsinformationprotectionpolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~devices_corporate_management.models.collectionofwindowsinformationprotectionpolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.collectionofwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_windows_information_protection_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('collectionofwindowsinformationprotectionpolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.odataerror, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies'}  # type: ignore

    def create_windows_information_protection_policies(
        self,
        body,  # type: "models.microsoftgraphwindowsinformationprotectionpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphwindowsinformationprotectionpolicy"
        """Create new navigation property to windowsInformationProtectionPolicies for deviceAppManagement.

        Create new navigation property to windowsInformationProtectionPolicies for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.microsoftgraphwindowsinformationprotectionpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphwindowsinformationprotectionpolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphwindowsinformationprotectionpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_windows_information_protection_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphwindowsinformationprotectionpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphwindowsinformationprotectionpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies'}  # type: ignore

    def get_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum138"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum139"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.microsoftgraphwindowsinformationprotectionpolicy"
        """Get windowsInformationProtectionPolicies from deviceAppManagement.

        Get windowsInformationProtectionPolicies from deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum138]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum139]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: microsoftgraphwindowsinformationprotectionpolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.microsoftgraphwindowsinformationprotectionpolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.microsoftgraphwindowsinformationprotectionpolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('microsoftgraphwindowsinformationprotectionpolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore

    def update_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id,  # type: str
        body,  # type: "models.microsoftgraphwindowsinformationprotectionpolicy"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property windowsInformationProtectionPolicies in deviceAppManagement.

        Update the navigation property windowsInformationProtectionPolicies in deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.microsoftgraphwindowsinformationprotectionpolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'microsoftgraphwindowsinformationprotectionpolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore

    def delete_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property windowsInformationProtectionPolicies for deviceAppManagement.

        Delete navigation property windowsInformationProtectionPolicies for deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.odataerror, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore
